[{"/code/src/index.js":"1","/code/src/reportWebVitals.js":"2","/code/src/components/App.js":"3","/code/src/redux/store.js":"4","/code/src/redux/reducers/index.js":"5","/code/src/components/pages/Splash/index.js":"6","/code/src/components/pages/Splash/Splash.jsx":"7","/code/src/components/pages/Home/index.js":"8","/code/src/components/pages/Home/Home.jsx":"9","/code/src/components/pages/index.js":"10","/code/src/components/layouts/Header/index.js":"11","/code/src/components/layouts/Header/Header.jsx":"12","/code/src/components/layouts/index.js":"13","/code/src/components/layouts/Dropdown/index.js":"14","/code/src/components/layouts/Dropdown/Dropdown.jsx":"15","/code/src/components/layouts/Card/index.js":"16","/code/src/components/layouts/Card/Card.jsx":"17","/code/src/components/layouts/Tag/index.js":"18","/code/src/components/layouts/Tag/Tag.jsx":"19","/code/src/components/layouts/Control/index.js":"20","/code/src/components/layouts/Control/Control.jsx":"21","/code/src/components/layouts/Detail/index.js":"22","/code/src/components/layouts/Detail/Detail.jsx":"23","/code/src/components/layouts/Stakeholder/index.js":"24","/code/src/components/layouts/Stakeholder/Stakeholder.jsx":"25","/code/src/components/layouts/InformationElement/index.js":"26","/code/src/components/layouts/InformationElement/InformationElement.jsx":"27","/code/src/redux/reducers/informationElementReducer.js":"28","/code/src/redux/reducers/relationshipReducer.js":"29","/code/src/redux/reducers/applicationReducer.js":"30","/code/src/redux/reducers/stakeholderReducer.js":"31","/code/src/redux/actions/stakeholderActions.js":"32","/code/src/redux/types.js":"33","/code/src/utils/environment.js":"34","/code/src/redux/actions/informationElementsActions.js":"35","/code/src/redux/actions/relationsActions.js":"36","/code/src/redux/actions/applicationActions.js":"37","/code/src/utils/colors.js":"38","/code/src/components/layouts/Visualization/Visualization.jsx":"39","/code/src/utils/d3.js":"40","/code/src/redux/reducers/helpReducer.js":"41","/code/src/redux/actions/helpActions.js":"42","/code/src/utils/app.utils.js":"43","/code/src/redux/actions/index.js":"44","/code/src/redux/actions/vizActions.js":"45","/code/src/redux/reducers/vizReducer.js":"46","/code/src/redux/reducers/configReducer.js":"47","/code/src/components/layouts/Slider/index.js":"48","/code/src/components/layouts/Slider/Slider.jsx":"49","/code/src/redux/actions/configActions.js":"50"},{"size":540,"mtime":1616859885444,"results":"51","hashOfConfig":"52"},{"size":362,"mtime":1607786260395,"results":"53","hashOfConfig":"52"},{"size":520,"mtime":1620960841160,"results":"54","hashOfConfig":"52"},{"size":391,"mtime":1614975704084,"results":"55","hashOfConfig":"52"},{"size":675,"mtime":1620960841178,"results":"56","hashOfConfig":"52"},{"size":55,"mtime":1615040244811,"results":"57","hashOfConfig":"52"},{"size":2293,"mtime":1620960841170,"results":"58","hashOfConfig":"52"},{"size":49,"mtime":1615043371606,"results":"59","hashOfConfig":"52"},{"size":27461,"mtime":1620960841168,"results":"60","hashOfConfig":"52"},{"size":0,"mtime":1614987955111,"results":"61","hashOfConfig":"52"},{"size":55,"mtime":1615043553473,"results":"62","hashOfConfig":"52"},{"size":724,"mtime":1615063282606,"results":"63","hashOfConfig":"52"},{"size":0,"mtime":1614975704078,"results":"64","hashOfConfig":"52"},{"size":61,"mtime":1615063152748,"results":"65","hashOfConfig":"52"},{"size":2699,"mtime":1620960841163,"results":"66","hashOfConfig":"52"},{"size":49,"mtime":1615071417859,"results":"67","hashOfConfig":"52"},{"size":1835,"mtime":1617799853284,"results":"68","hashOfConfig":"52"},{"size":46,"mtime":1615078643059,"results":"69","hashOfConfig":"52"},{"size":528,"mtime":1617799853286,"results":"70","hashOfConfig":"52"},{"size":58,"mtime":1615219058338,"results":"71","hashOfConfig":"52"},{"size":20990,"mtime":1620962332271,"results":"72","hashOfConfig":"52"},{"size":55,"mtime":1615225040581,"results":"73","hashOfConfig":"52"},{"size":2025,"mtime":1620960841162,"results":"74","hashOfConfig":"52"},{"size":70,"mtime":1616859885441,"results":"75","hashOfConfig":"52"},{"size":26250,"mtime":1620960841167,"results":"76","hashOfConfig":"52"},{"size":91,"mtime":1616859885439,"results":"77","hashOfConfig":"52"},{"size":25424,"mtime":1620960841165,"results":"78","hashOfConfig":"52"},{"size":2286,"mtime":1620960841178,"results":"79","hashOfConfig":"52"},{"size":792,"mtime":1620960841179,"results":"80","hashOfConfig":"52"},{"size":1889,"mtime":1620960841176,"results":"81","hashOfConfig":"52"},{"size":1405,"mtime":1620960841180,"results":"82","hashOfConfig":"52"},{"size":2528,"mtime":1620960841174,"results":"83","hashOfConfig":"52"},{"size":1641,"mtime":1620960841181,"results":"84","hashOfConfig":"52"},{"size":163,"mtime":1616859894226,"results":"85","hashOfConfig":"52"},{"size":3661,"mtime":1620960841173,"results":"86","hashOfConfig":"52"},{"size":1609,"mtime":1620960841174,"results":"87","hashOfConfig":"52"},{"size":3144,"mtime":1620960841172,"results":"88","hashOfConfig":"52"},{"size":122,"mtime":1617799853291,"results":"89","hashOfConfig":"52"},{"size":4093,"mtime":1620960841167,"results":"90","hashOfConfig":"52"},{"size":16403,"mtime":1621051805444,"results":"91","hashOfConfig":"52"},{"size":326,"mtime":1620960841177,"results":"92","hashOfConfig":"52"},{"size":589,"mtime":1620960841173,"results":"93","hashOfConfig":"52"},{"size":792,"mtime":1620960841182,"results":"94","hashOfConfig":"52"},{"size":0,"mtime":1614975704083,"results":"95","hashOfConfig":"52"},{"size":340,"mtime":1620960841175,"results":"96","hashOfConfig":"52"},{"size":438,"mtime":1620960841180,"results":"97","hashOfConfig":"52"},{"size":530,"mtime":1620961285101,"results":"98","hashOfConfig":"52"},{"size":55,"mtime":1620960841166,"results":"99","hashOfConfig":"52"},{"size":459,"mtime":1620960841165,"results":"100","hashOfConfig":"52"},{"size":307,"mtime":1620962291012,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"a83vg7",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"/code/src/index.js",[],["210","211"],"/code/src/reportWebVitals.js",[],"/code/src/components/App.js",["212"],"import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\n// pages\nimport Splash from \"./pages/Splash\";\nimport Home from \"./pages/Home\";\n\n// Redux store\nimport store from \"../redux/store\";\n\nfunction App() {\n    return (\n        <Router>\n            <Provider store={store}>\n                {/* <Splash /> */}\n                <Home />\n                <div className=\"app\"></div>\n            </Provider>\n        </Router>\n    );\n}\n\nexport default App;\n","/code/src/redux/store.js",[],"/code/src/redux/reducers/index.js",[],"/code/src/components/pages/Splash/index.js",[],"/code/src/components/pages/Splash/Splash.jsx",[],"/code/src/components/pages/Home/index.js",[],"/code/src/components/pages/Home/Home.jsx",["213","214","215","216","217"],"import { React, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Skeleton from \"react-loading-skeleton\";\n\n// Actions\nimport { getStakeholders } from \"../../../redux/actions/stakeholderActions\";\nimport { getInformationElements } from \"../../../redux/actions/informationElementsActions\";\nimport { getRelationships } from \"../../../redux/actions/relationsActions\";\nimport { toggleHelp } from \"../../../redux/actions/helpActions\";\nimport {\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused\n} from \"../../../redux/actions/applicationActions\";\n\nimport Header from \"../../layouts/Header\";\nimport Card from \"../../layouts/Card\";\nimport Tag from \"../../layouts/Tag\";\nimport Control from \"../../layouts/Control\";\nimport Detail from \"../../layouts/Detail\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faExpand,\n    // faSearchPlus,\n    // faSearchMinus ,\n    faCompress\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./_home.scss\";\nimport { colors } from \"../../../utils/colors\";\nimport Visualization from \"../../layouts/Visualization/Visualization\";\nimport {\n    overed,\n    outed,\n    clicked,\n    setPrimaryAnimation,\n    unsetPrimaryAnimation\n} from \"../../../utils/d3\";\n\nconst Home = ({\n    application,\n    stakeholder,\n    informationElement,\n    relationship,\n    help,\n    viz,\n\n    getStakeholders,\n    getInformationElements,\n    getRelationships,\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused,\n    toggleHelp\n}) => {\n    const [expanded, setExpanded] = useState(true);\n    const [endingHelp, setEndingHelp] = useState(false);\n    const handleToggleViz = () => {\n        setExpanded(!expanded);\n    };\n\n    useEffect(() => {\n        const selectedApp = 1;\n        getApplications().then(() => {\n            setApplication(selectedApp);\n        });\n        getStakeholders({ application: selectedApp });\n        getInformationElements({ application: selectedApp });\n        getRelationships({ stakeholder__application: selectedApp });\n    }, []);\n\n    const handleCardClick = (event, element) => {\n        event.preventDefault();\n        if (!application.focused) {\n            setPrimaryAnimation(\n                event,\n                viz.root\n                    .leaves()\n                    .find(node => node.data.label === element.label)\n            );\n            setFocused(element);\n        } else {\n            if (application.focused === element) {\n                unsetPrimaryAnimation(\n                    event,\n                    viz.root\n                        .leaves()\n                        .find(node => node.data.label === element.label)\n                );\n                removeFocused(element);\n            } else {\n                unsetPrimaryAnimation(\n                    event,\n                    viz.root\n                        .leaves()\n                        .find(\n                            node =>\n                                node.data.label === application.focused.label\n                        )\n                );\n                setTimeout(() => {\n                    setPrimaryAnimation(\n                        event,\n                        viz.root\n                            .leaves()\n                            .find(node => node.data.label === element.label)\n                    );\n                }, 400);\n                setFocused(element);\n            }\n        }\n    };\n\n    const endHelp = () => {\n        setEndingHelp(true);\n        setTimeout(() => {\n            toggleHelp();\n            setEndingHelp(false);\n        }, 500);\n    };\n\n    return (\n        <>\n            <div className=\"home\">\n                {(help || endingHelp) && (\n                    <>\n                        <div\n                            className={\n                                \"home__help fromTop \" +\n                                (endingHelp ? \"fromBottom\" : \"\")\n                            }\n                            onClick={() => {\n                                endHelp();\n                            }}\n                        >\n                            <span>Exit help mode</span>\n                        </div>\n                    </>\n                )}\n\n                <Header />\n\n                <div className=\"home__content\">\n                    <div className=\"home__top\">\n                        <Control />\n                    </div>\n                    <div className=\"home__bottom\">\n                        <div\n                            className={\n                                \"home__grid\" + (expanded ? \"\" : \"-expanded\")\n                            }\n                        >\n                            <div className=\"home__left\">\n                                <div className=\"home__navigation\">\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#4A6FA5\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Stakeholders\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>Stakeholders</b> are\n                                                        the people that use the\n                                                        service or the software,\n                                                        departements,\n                                                        organisations, etc.,\n                                                        which are involved in\n                                                        the information exchange\n                                                        process, providing,\n                                                        receiving, or requesting\n                                                        transparency. We can\n                                                        group stakeholders by\n                                                        one entity, for example\n                                                        User or IT Department.\n                                                        However, the exchanged\n                                                        information within an\n                                                        information exchange\n                                                        system may concern all\n                                                        stakeholders within that\n                                                        system, or it may\n                                                        concern the public\n                                                        audience.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#FB5012\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Policy\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>\n                                                            Policy transparency\n                                                        </b>{\" \"}\n                                                        every question whose\n                                                        answer provides goals,\n                                                        intentions, policies and\n                                                        decision making is a\n                                                        policy transparency\n                                                        question. “Why?” is the\n                                                        main question here,\n                                                        i.e., why certain action\n                                                        is performed or for what\n                                                        reason this action is\n                                                        performed in the context\n                                                        of transparency. For\n                                                        example, in a hosting\n                                                        service platform, policy\n                                                        transparency reveals why\n                                                        encryption is needed in\n                                                        servers, or why I have a\n                                                        limited storage\n                                                        capacity.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#61C9A8\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Process\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>\n                                                            Process transparency\n                                                        </b>{\" \"}\n                                                        every question whose\n                                                        answer provides\n                                                        procedures, processes,\n                                                        behaviours and\n                                                        interactions is a\n                                                        process transparency\n                                                        question. “How?” is the\n                                                        main question here,\n                                                        i.e., how something is\n                                                        performed or done in the\n                                                        context of transparency.\n                                                        For example in a hosting\n                                                        service platform,\n                                                        process transparency\n                                                        reveals how data is\n                                                        encrypted in the\n                                                        servers, and how servers\n                                                        are immune from cyber\n                                                        attacks.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#FFDA0A\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Data\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>Data transparency</b>{\" \"}\n                                                        every question whose\n                                                        answer provides data,\n                                                        content or information\n                                                        is a data transparency\n                                                        question. “What? When?\n                                                        Where? Who?” These\n                                                        questions primarily\n                                                        answer what information\n                                                        is needed and who are\n                                                        the stakeholders in the\n                                                        context of transparency.\n                                                        For example, in a\n                                                        hosting service\n                                                        platform, data\n                                                        transparency reveals the\n                                                        server's performances to\n                                                        the client for each\n                                                        plan, and the price of\n                                                        each plan.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                </div>\n                                <br />\n                                <div\n                                    className=\"d-flex\"\n                                    style={{ marginBottom: \"20px\" }}\n                                >\n                                    <h3\n                                        style={{\n                                            margin: \"0\",\n                                            marginTop: \"-1px\"\n                                        }}\n                                        className={help ? \"tip\" : \"\"}\n                                        data-tip=\"1\"\n                                    >\n                                        Stakeholders\n                                        {help && (\n                                            <div className=\"tooltip__wrapper\">\n                                                <span className=\"help__text\">\n                                                    <b>Stakeholders</b> are the\n                                                    people that use the service\n                                                    or the software,\n                                                    departements, organisations,\n                                                    etc., which are involved in\n                                                    the information exchange\n                                                    process, providing,\n                                                    receiving, or requesting\n                                                    transparency. We can group\n                                                    stakeholders by one entity,\n                                                    for example User or IT\n                                                    Department. However, the\n                                                    exchanged information within\n                                                    an information exchange\n                                                    system may concern all\n                                                    stakeholders within that\n                                                    system, or it may concern\n                                                    the public audience.\n                                                </span>\n                                            </div>\n                                        )}\n                                    </h3>\n                                    {stakeholder.loading ? (\n                                        <Tag isLoading={true} />\n                                    ) : (\n                                        <Tag\n                                            content={\n                                                stakeholder.stakeholders?.length\n                                            }\n                                            color=\"#3d4659\"\n                                        />\n                                    )}\n                                </div>\n                                {stakeholder.loading ? (\n                                    <>\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                    </>\n                                ) : !stakeholder.stakeholders ||\n                                  !stakeholder.stakeholders.length ? (\n                                    <div>Empty...</div>\n                                ) : (\n                                    <>\n                                        {stakeholder.stakeholders.map(s => (\n                                            <Card\n                                                key={s.id}\n                                                label={s.label}\n                                                name={s.name}\n                                                color=\"#4A6FA5\"\n                                                onClick={e =>\n                                                    handleCardClick(e, s)\n                                                }\n                                            />\n                                        ))}\n                                    </>\n                                )}\n                                <br />\n                                <div\n                                    className=\"d-flex\"\n                                    style={{ marginBottom: \"20px\" }}\n                                >\n                                    <h3\n                                        style={{\n                                            margin: \"0\",\n                                            marginTop: \"-1px\"\n                                        }}\n                                        className={help ? \"tip\" : \"\"}\n                                        data-tip=\"1\"\n                                    >\n                                        Information elements\n                                        {help && (\n                                            <div className=\"tooltip__wrapper\">\n                                                <span className=\"help__text\">\n                                                    <b>Information elements</b>{\" \"}\n                                                    are pieces of information\n                                                    exchanged amongst\n                                                    stakeholders. IPs or\n                                                    information providers are\n                                                    responsible for form and\n                                                    present the information to\n                                                    the IRs or information\n                                                    receivers. The way the{\" \"}\n                                                    <b>information elements</b>{\" \"}\n                                                    are formed and presented to\n                                                    others is affected by\n                                                    stakeholders’ transparency\n                                                    requirements. There are\n                                                    three different types of\n                                                    information elements,\n                                                    related to their\n                                                    transparency meaningfulness.\n                                                    These types are as follows:{\" \"}\n                                                    <b>data</b> type,{\" \"}\n                                                    <b>process</b> type, or{\" \"}\n                                                    <b>policy</b> type.\n                                                </span>\n                                            </div>\n                                        )}\n                                    </h3>\n                                    {informationElement.loading ? (\n                                        <Tag isLoading={true} />\n                                    ) : (\n                                        <Tag\n                                            content={\n                                                informationElement\n                                                    .informationElements?.length\n                                            }\n                                            color=\"#3d4659\"\n                                        />\n                                    )}\n                                </div>\n                                {informationElement.loading ? (\n                                    <>\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                    </>\n                                ) : !informationElement.informationElements ||\n                                  !informationElement.informationElements\n                                      .length ? (\n                                    <div>Empty...</div>\n                                ) : (\n                                    <>\n                                        {informationElement.informationElements.map(\n                                            ie => (\n                                                <Card\n                                                    key={ie.id}\n                                                    label={ie.label}\n                                                    name={ie.name}\n                                                    color={colors[ie.type]}\n                                                    onClick={e =>\n                                                        handleCardClick(e, ie)\n                                                    }\n                                                />\n                                            )\n                                        )}\n                                    </>\n                                )}\n                            </div>\n                            <div className=\"home__middle\">\n                                <div\n                                    className=\"home__expand\"\n                                    style={{ right: expanded ? \"14px\" : 0 }}\n                                >\n                                    <FontAwesomeIcon\n                                        icon={expanded ? faExpand : faCompress}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                        onClick={handleToggleViz}\n                                    />\n                                    {/* <FontAwesomeIcon\n                                        icon={faSearchPlus}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                    />\n                                    <FontAwesomeIcon\n                                        icon={faSearchMinus}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                    /> */}\n                                </div>\n                                <Visualization />\n                            </div>\n                            <div\n                                className={\n                                    \"home__right\" +\n                                    (expanded ? \"\" : \"-expanded\")\n                                }\n                            >\n                                <Detail />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    relationship: state.relationship,\n    help: state.help.help,\n    viz: state.viz\n});\n\nexport default connect(mapSateToProps, {\n    getStakeholders,\n    getInformationElements,\n    getRelationships,\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused,\n    toggleHelp\n})(Home);\n","/code/src/components/pages/index.js",[],["218","219"],"/code/src/components/layouts/Header/index.js",[],"/code/src/components/layouts/Header/Header.jsx",[],"/code/src/components/layouts/index.js",[],["220","221"],"/code/src/components/layouts/Dropdown/index.js",[],"/code/src/components/layouts/Dropdown/Dropdown.jsx",["222"],"import { React, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./_dropdown.scss\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faCaretDown,\n    faInfoCircle,\n    faCog,\n    faSignOutAlt,\n    faLayerGroup\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { toggleHelp } from \"../../../redux/actions/helpActions\";\nimport { handleTipPosition } from \"../../../utils/app.utils\";\n\nconst Dropdown = ({ help, toggleHelp }) => {\n    const refDropdown = useRef(null);\n\n    const toggleDropdown = event => {\n        if (refDropdown.current?.open) {\n            if (event !== undefined) {\n                event.preventDefault();\n            }\n            refDropdown.current.open = false;\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"click\", () => {\n            toggleDropdown();\n        });\n    }, []);\n\n    const startHelp = e => {\n        toggleHelp();\n        document.querySelectorAll(\"[data-tip]\").forEach((element) => {\n            element.removeEventListener(\"mouseenter\", handleTipPosition);\n            element.addEventListener(\"mouseenter\", handleTipPosition);\n        });\n    };\n\n    return (\n        <details className=\"dropdown\" ref={refDropdown}>\n            <summary className=\"dropdown__toggle\" onClick={toggleDropdown}>\n                <FontAwesomeIcon icon={faCog} fixedWidth />\n                <FontAwesomeIcon icon={faCaretDown} fixedWidth size=\"sm\" />\n            </summary>\n            <div className=\"dropdown__menu\">\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faLayerGroup} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Your applications</Link>\n                </div>\n                <div className=\"dropdown__devider\"></div>\n                <div className=\"dropdown__item\" onClick={e => startHelp(e)}>\n                    <FontAwesomeIcon icon={faInfoCircle} fixedWidth size=\"md\" />\n                    <a href=\"#\" to=\"/\">\n                        Help\n                    </a>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faCog} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Settings</Link>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faSignOutAlt} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Sign out</Link>\n                </div>\n            </div>\n        </details>\n    );\n};\n\nconst mapSateToProps = state => ({\n    help: state.help.help\n});\n\nexport default connect(mapSateToProps, {\n    toggleHelp\n})(Dropdown);\n","/code/src/components/layouts/Card/index.js",[],"/code/src/components/layouts/Card/Card.jsx",[],"/code/src/components/layouts/Tag/index.js",[],"/code/src/components/layouts/Tag/Tag.jsx",[],"/code/src/components/layouts/Control/index.js",[],"/code/src/components/layouts/Control/Control.jsx",["223"],"import { React, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Skeleton from \"react-loading-skeleton\";\n\nimport \"./_control.scss\";\n\nimport Tag from \"../Tag\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faChevronDown,\n    faChevronUp,\n    faSpinner\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport Slider from \"../Slider\";\n\nimport {\n    updateConfig,\n    resetConfig\n} from \"../../../redux/actions/configActions\";\n\nconst Control = ({\n    application,\n    stakeholder,\n    informationElement,\n    help,\n    config,\n\n    updateConfig,\n    resetConfig\n}) => {\n    let [isOpen, setIsOpen] = useState(false);\n\n    const handleToggle = () => {\n        setIsOpen(!isOpen);\n    };\n\n    if (application.loading) {\n        return (\n            <div className=\"control control-collapsed\">\n                <FontAwesomeIcon\n                    className=\"spinner\"\n                    icon={faSpinner}\n                    size=\"lg\"\n                />\n            </div>\n        );\n    }\n\n    const handleSliderChange = (event, metric) => {\n        updateConfig({ [metric]: event.target.value });\n    };\n\n    const handleRadioClick = (event, mode) => {\n        updateConfig({ textMode: mode });\n    };\n    return (\n        <>\n            <div className={\"control \" + (isOpen ? \"\" : \"control-collapsed\")}>\n                <div className=\"control__header\">\n                    <div className=\"control__left\">\n                        {application.loading ? (\n                            <h2>{application.application?.name}</h2>\n                        ) : (\n                            <h2>{application.application?.name}</h2>\n                        )}\n                    </div>\n                    <div className=\"control__right\">\n                        {/* <FontAwesomeIcon\n                            icon={faInfo}\n                            fixedWidth\n                            size=\"sm\"\n                        />\n                        <a href=\"\">read transparency note</a> */}\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Stakeholders\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Stakeholders</b> are the people\n                                            that use the service or the\n                                            software, departements,\n                                            organisations, etc., which are\n                                            involved in the information exchange\n                                            process, providing, receiving, or\n                                            requesting transparency. We can\n                                            group stakeholders by one entity,\n                                            for example User or IT Department.\n                                            However, the exchanged information\n                                            within an information exchange\n                                            system may concern all stakeholders\n                                            within that system, or it may\n                                            concern the public audience.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    stakeholder.stakeholders &&\n                                    stakeholder.stakeholders.length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Policy\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Policy transparency</b> every\n                                            question whose answer provides\n                                            goals, intentions, policies and\n                                            decision making is a policy\n                                            transparency question. “Why?” is the\n                                            main question here, i.e., why\n                                            certain action is performed or for\n                                            what reason this action is performed\n                                            in the context of transparency. For\n                                            example, in a hosting service\n                                            platform, policy transparency\n                                            reveals why encryption is needed in\n                                            servers, or why I have a limited\n                                            storage capacity.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"policy\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Process\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Process transparency</b> every\n                                            question whose answer provides\n                                            procedures, processes, behaviours\n                                            and interactions is a process\n                                            transparency question. “How?” is the\n                                            main question here, i.e., how\n                                            something is performed or done in\n                                            the context of transparency. For\n                                            example in a hosting service\n                                            platform, process transparency\n                                            reveals how data is encrypted in the\n                                            servers, and how servers are immune\n                                            from cyber attacks.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"process\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Data\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Data transparency</b> every\n                                            question whose answer provides data,\n                                            content or information is a data\n                                            transparency question. “What? When?\n                                            Where? Who?” These questions\n                                            primarily answer what information is\n                                            needed and who are the stakeholders\n                                            in the context of transparency. For\n                                            example, in a hosting service\n                                            platform, data transparency reveals\n                                            the server's performances to the\n                                            client for each plan, and the price\n                                            of each plan.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"data\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"control__bottom\">\n                    <div\n                        className={\n                            \"control__pannel\" +\n                            (isOpen ? \"\" : \" control__pannel-callapsed\")\n                        }\n                    >\n                        {/* <p>✏️ Control here ...</p> */}\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Tension</span>\n                                <span className=\"control__value\">\n                                    {config.tension}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={1}\n                                value={config.tension}\n                                step={0.05}\n                                onChange={event => {\n                                    handleSliderChange(event, \"tension\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Radius</span>\n                                <span className=\"control__value\">\n                                    {config.radius}\n                                </span>\n                            </div>\n                            <Slider\n                                min={100}\n                                max={400}\n                                value={config.radius}\n                                step={10}\n                                onChange={event => {\n                                    handleSliderChange(event, \"radius\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Extent</span>\n                                <span className=\"control__value\">\n                                    {config.extent}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={360}\n                                value={config.extent}\n                                step={10}\n                                onChange={event => {\n                                    handleSliderChange(event, \"extent\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Rotate</span>\n                                <span className=\"control__value\">\n                                    {config.rotate}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={360}\n                                value={config.rotate}\n                                step={10}\n                                onChange={event => {\n                                    handleSliderChange(event, \"rotate\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">\n                                    Text size\n                                </span>\n                                <span className=\"control__value\">\n                                    {config.textSize}\n                                </span>\n                            </div>\n                            <Slider\n                                min={10}\n                                max={20}\n                                value={config.textSize}\n                                step={1}\n                                onChange={event => {\n                                    handleSliderChange(event, \"textSize\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">\n                                    Text offset\n                                </span>\n                                <span className=\"control__value\">\n                                    {config.textOffset}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={3}\n                                value={config.textOffset}\n                                step={0.25}\n                                onChange={event => {\n                                    handleSliderChange(event, \"textOffset\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container-last\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">\n                                    Text mode\n                                </span>\n                                <br />\n                            </div>\n                            <div className=\"control__radio_container\">\n                                <div className=\"control_radio\">\n                                    <div\n                                        className={\n                                            config.textMode === \"name\"\n                                                ? \"radio-clicked\"\n                                                : \"radio\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"name\");\n                                        }}\n                                    ></div>\n                                    <span\n                                        className={\n                                            config.textMode === \"name\"\n                                                ? \"radio-span-clicked\"\n                                                : \"\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"name\");\n                                        }}\n                                    >\n                                        Name\n                                    </span>\n                                </div>\n                                <div className=\"control_radio\">\n                                    <div\n                                        className={\n                                            config.textMode === \"label\"\n                                                ? \"radio-clicked\"\n                                                : \"radio\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"label\");\n                                        }}\n                                    ></div>\n                                    <span\n                                        className={\n                                            config.textMode === \"label\"\n                                                ? \"radio-span-clicked\"\n                                                : \"\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"label\");\n                                        }}\n                                    >\n                                        Label\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"control__container-last\">\n                            <span\n                                className=\"control__button\"\n                                onClick={() => {\n                                    resetConfig();\n                                }}\n                            >\n                                Reset\n                            </span>\n                        </div>\n                    </div>\n\n                    <div\n                        className=\"control__toggle\"\n                        onClick={handleToggle}\n                        title=\"Toggle menu\"\n                    >\n                        <FontAwesomeIcon icon={faChevronUp} size=\"sm\" />\n                        <FontAwesomeIcon icon={faChevronDown} size=\"sm\" />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    help: state.help.help,\n    config: state.config\n});\n\nexport default connect(mapSateToProps, { updateConfig, resetConfig })(Control);\n","/code/src/components/layouts/Detail/index.js",[],"/code/src/components/layouts/Detail/Detail.jsx",[],"/code/src/components/layouts/Stakeholder/index.js",[],"/code/src/components/layouts/Stakeholder/Stakeholder.jsx",[],"/code/src/components/layouts/InformationElement/index.js",[],"/code/src/components/layouts/InformationElement/InformationElement.jsx",[],"/code/src/redux/reducers/informationElementReducer.js",[],"/code/src/redux/reducers/relationshipReducer.js",[],"/code/src/redux/reducers/applicationReducer.js",[],"/code/src/redux/reducers/stakeholderReducer.js",[],"/code/src/redux/actions/stakeholderActions.js",[],"/code/src/redux/types.js",[],"/code/src/utils/environment.js",[],"/code/src/redux/actions/informationElementsActions.js",[],"/code/src/redux/actions/relationsActions.js",[],"/code/src/redux/actions/applicationActions.js",[],"/code/src/utils/colors.js",[],"/code/src/components/layouts/Visualization/Visualization.jsx",["224","225"],"import React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_visualization.scss\";\nimport { chart } from \"../../../utils/d3\";\nimport { setJsonData } from \"../../../redux/actions/vizActions\";\n\nimport { select } from \"d3\";\nexport const d3 = require(\"d3\");\n\nconst Visualization = ({\n    application,\n    stakeholder,\n    informationElement,\n    relationship,\n    jsonData,\n    config,\n    setJsonData\n}) => {\n    const svgRef = useRef(null);\n\n    const drawViz = ({ nodes, links }) => {\n        const svg = select(svgRef.current);\n\n        chart(svg, { nodes, links });\n    };\n\n    const getVizData = () => {\n        let data = {};\n        data.nodes = [];\n        data.links = [];\n        stakeholder.stakeholders.forEach(stakeholder => {\n            data.nodes.push({\n                id: stakeholder.id,\n                label: stakeholder.label,\n                name: stakeholder.name,\n                group: \"stakeholder\",\n                weight: stakeholder.weight\n            });\n        });\n        informationElement.informationElements.forEach(ie => {\n            data.nodes.push({\n                id: ie.id,\n                label: ie.label,\n                name: ie.name,\n                group: ie.type,\n                weight: ie.weight\n            });\n        });\n        relationship.relations\n            .map(relation => {\n                return {\n                    id: relation.id,\n                    type: relation.type,\n                    stakeholder: stakeholder.stakeholders.find(s => {\n                        return s.id === relation.stakeholder;\n                    }),\n                    information_element: informationElement.informationElements.find(\n                        ie_ => {\n                            return ie_.id === relation.information_element;\n                        }\n                    )\n                };\n            })\n            .forEach(relation => {\n                data.links.push({\n                    source: [\"production\"].includes(relation.type)\n                        ? relation.stakeholder.label\n                        : relation.information_element.label,\n                    target: [\"production\"].includes(relation.type)\n                        ? relation.information_element.label\n                        : relation.stakeholder.label,\n                    type: relation.type\n                });\n            });\n        informationElement.informationElements.forEach(ie => {\n            if (ie.information_elements.length !== 0) {\n                ie.information_elements.forEach(ie_ => {\n                    data.links.push({\n                        source: informationElement.informationElements.find(\n                            ie__ => {\n                                return ie__.id === ie_;\n                            }\n                        ).label,\n                        target: ie.label,\n                        type: \"uses\"\n                    });\n                });\n            }\n        });\n        setJsonData(data);\n        return data;\n    };\n\n    useEffect(() => {\n        if (\n            stakeholder.stakeholders &&\n            informationElement.informationElements &&\n            relationship.relations\n        ) {\n            const data = getVizData();\n            drawViz(data);\n        }\n\n        return () => {\n            const svg = select(svgRef.current);\n            svg.selectAll(\"*\").remove();\n        };\n    }, [\n        stakeholder.stakeholders,\n        informationElement.informationElements,\n        relationship.relations,\n        config\n    ]);\n\n    // return <div>Hello 👋, I am a Visualization component.</div>;\n    return <svg style={{ marginTop: \"-40px\" }} ref={svgRef}></svg>;\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    relationship: state.relationship,\n    jsonData: state.viz.jsonData,\n    root: state.viz.root,\n    config: state.config\n});\n\nexport default connect(mapSateToProps, { setJsonData })(Visualization);\n","/code/src/utils/d3.js",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240"],"/code/src/redux/reducers/helpReducer.js",[],"/code/src/redux/actions/helpActions.js",[],"/code/src/utils/app.utils.js",[],"/code/src/redux/actions/index.js",[],"/code/src/redux/actions/vizActions.js",[],"/code/src/redux/reducers/vizReducer.js",[],"/code/src/redux/reducers/configReducer.js",[],"/code/src/components/layouts/Slider/index.js",[],"/code/src/components/layouts/Slider/Slider.jsx",[],"/code/src/redux/actions/configActions.js",[],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":6,"column":8,"nodeType":"247","messageId":"248","endLine":6,"endColumn":14},{"ruleId":"245","severity":1,"message":"249","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":16},{"ruleId":"245","severity":1,"message":"250","line":35,"column":5,"nodeType":"247","messageId":"248","endLine":35,"endColumn":11},{"ruleId":"245","severity":1,"message":"251","line":36,"column":5,"nodeType":"247","messageId":"248","endLine":36,"endColumn":10},{"ruleId":"245","severity":1,"message":"252","line":37,"column":5,"nodeType":"247","messageId":"248","endLine":37,"endColumn":12},{"ruleId":"253","severity":1,"message":"254","line":73,"column":8,"nodeType":"255","endLine":73,"endColumn":10,"suggestions":"256"},{"ruleId":"241","replacedBy":"257"},{"ruleId":"243","replacedBy":"258"},{"ruleId":"241","replacedBy":"259"},{"ruleId":"243","replacedBy":"260"},{"ruleId":"261","severity":1,"message":"262","line":59,"column":21,"nodeType":"263","endLine":59,"endColumn":40},{"ruleId":"245","severity":1,"message":"249","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":16},{"ruleId":"253","severity":1,"message":"264","line":106,"column":39,"nodeType":"247","endLine":106,"endColumn":46},{"ruleId":"253","severity":1,"message":"265","line":109,"column":8,"nodeType":"255","endLine":114,"endColumn":6,"suggestions":"266"},{"ruleId":"245","severity":1,"message":"267","line":3,"column":10,"nodeType":"247","messageId":"248","endLine":3,"endColumn":20},{"ruleId":"245","severity":1,"message":"268","line":3,"column":22,"nodeType":"247","messageId":"248","endLine":3,"endColumn":35},{"ruleId":"245","severity":1,"message":"269","line":10,"column":5,"nodeType":"247","messageId":"248","endLine":10,"endColumn":21},{"ruleId":"245","severity":1,"message":"270","line":11,"column":5,"nodeType":"247","messageId":"248","endLine":11,"endColumn":14},{"ruleId":"245","severity":1,"message":"271","line":12,"column":5,"nodeType":"247","messageId":"248","endLine":12,"endColumn":17},{"ruleId":"245","severity":1,"message":"272","line":13,"column":5,"nodeType":"247","messageId":"248","endLine":13,"endColumn":16},{"ruleId":"273","severity":1,"message":"274","line":26,"column":9,"nodeType":"275","messageId":"276","endLine":26,"endColumn":13},{"ruleId":"273","severity":1,"message":"274","line":34,"column":13,"nodeType":"275","messageId":"276","endLine":34,"endColumn":17},{"ruleId":"273","severity":1,"message":"274","line":49,"column":13,"nodeType":"275","messageId":"276","endLine":49,"endColumn":17},{"ruleId":"245","severity":1,"message":"277","line":436,"column":11,"nodeType":"247","messageId":"248","endLine":436,"endColumn":18},{"ruleId":"273","severity":1,"message":"274","line":444,"column":13,"nodeType":"275","messageId":"276","endLine":444,"endColumn":17},{"ruleId":"245","severity":1,"message":"278","line":451,"column":11,"nodeType":"247","messageId":"248","endLine":451,"endColumn":15},{"ruleId":"245","severity":1,"message":"279","line":488,"column":11,"nodeType":"247","messageId":"248","endLine":488,"endColumn":15},{"ruleId":"245","severity":1,"message":"280","line":501,"column":11,"nodeType":"247","messageId":"248","endLine":501,"endColumn":17},{"ruleId":"273","severity":1,"message":"274","line":518,"column":13,"nodeType":"275","messageId":"276","endLine":518,"endColumn":17},"no-native-reassign",["281"],"no-negated-in-lhs",["282"],"no-unused-vars","'Splash' is defined but never used.","Identifier","unusedVar","'Skeleton' is defined but never used.","'overed' is defined but never used.","'outed' is defined but never used.","'clicked' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getApplications', 'getInformationElements', 'getRelationships', 'getStakeholders', and 'setApplication'. Either include them or remove the dependency array. If 'getApplications' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["283"],["281"],["282"],["281"],["282"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The ref value 'svgRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'svgRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'getVizData'. Either include it or remove the dependency array.",["284"],"'setFocused' is defined but never used.","'removeFocused' is defined but never used.","'colorStakeholder' is assigned a value but never used.","'colorData' is assigned a value but never used.","'colorProcess' is assigned a value but never used.","'colorPolicy' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'arcDraw' is assigned a value but never used.","'node' is assigned a value but never used.","'link' is assigned a value but never used.","'circle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},"Update the dependencies array to be: [getApplications, getInformationElements, getRelationships, getStakeholders, setApplication]",{"range":"289","text":"290"},"Update the dependencies array to be: [stakeholder.stakeholders, informationElement.informationElements, relationship.relations, config, getVizData]",{"range":"291","text":"292"},[2070,2072],"[getApplications, getInformationElements, getRelationships, getStakeholders, setApplication]",[3454,3590],"[stakeholder.stakeholders, informationElement.informationElements, relationship.relations, config, getVizData]"]