[{"/code/src/index.js":"1","/code/src/reportWebVitals.js":"2","/code/src/components/App.js":"3","/code/src/redux/store.js":"4","/code/src/utils/setAuthToken.js":"5","/code/src/components/pages/Register/index.js":"6","/code/src/components/pages/Login/index.js":"7","/code/src/components/pages/Home/index.js":"8","/code/src/components/pages/Splash/index.js":"9","/code/src/redux/reducers/index.js":"10","/code/src/components/pages/Login/Login.jsx":"11","/code/src/components/pages/Register/Register.jsx":"12","/code/src/components/pages/Splash/Splash.jsx":"13","/code/src/components/pages/Home/Home.jsx":"14","/code/src/redux/reducers/informationElementReducer.js":"15","/code/src/redux/reducers/vizReducer.js":"16","/code/src/redux/reducers/stakeholderReducer.js":"17","/code/src/redux/reducers/relationshipReducer.js":"18","/code/src/redux/reducers/applicationReducer.js":"19","/code/src/redux/reducers/modalReducer.js":"20","/code/src/redux/reducers/authReducer.js":"21","/code/src/redux/reducers/configReducer.js":"22","/code/src/redux/reducers/helpReducer.js":"23","/code/src/utils/colors.js":"24","/code/src/utils/d3.js":"25","/code/src/redux/actions/modalActions.js":"26","/code/src/redux/actions/informationElementsActions.js":"27","/code/src/redux/actions/relationsActions.js":"28","/code/src/redux/actions/applicationActions.js":"29","/code/src/redux/actions/stakeholderActions.js":"30","/code/src/redux/actions/helpActions.js":"31","/code/src/components/forms/StakeholderInformationElementRelationshipForm/StakeholderInformationElementRelationshipForm.jsx":"32","/code/src/components/forms/InformationElementAssociationForm/InformationElementAssociationForm.jsx":"33","/code/src/components/forms/InformationElementForm/InformationElementForm.jsx":"34","/code/src/components/layouts/Visualization/Visualization.jsx":"35","/code/src/redux/types.js":"36","/code/src/components/layouts/Modal/index.js":"37","/code/src/components/forms/StakeholderForm/index.js":"38","/code/src/components/layouts/Detail/index.js":"39","/code/src/components/forms/ApplicationForm/index.js":"40","/code/src/components/layouts/Tag/index.js":"41","/code/src/components/layouts/Control/index.js":"42","/code/src/components/layouts/Card/index.js":"43","/code/src/components/layouts/Header/index.js":"44","/code/src/redux/actions/vizActions.js":"45","/code/src/utils/environment.js":"46","/code/src/utils/app.utils.js":"47","/code/src/components/forms/StakeholderForm/StakeholderForm.jsx":"48","/code/src/components/layouts/Control/Control.jsx":"49","/code/src/components/forms/ApplicationForm/ApplicationForm.jsx":"50","/code/src/components/layouts/Modal/Modal.jsx":"51","/code/src/components/layouts/Tag/Tag.jsx":"52","/code/src/components/layouts/Card/Card.jsx":"53","/code/src/components/layouts/Detail/Detail.jsx":"54","/code/src/components/layouts/Header/Header.jsx":"55","/code/src/redux/actions/configActions.js":"56","/code/src/components/layouts/Stakeholder/index.js":"57","/code/src/components/layouts/Slider/index.js":"58","/code/src/components/layouts/InformationElement/index.js":"59","/code/src/components/layouts/Dropdown/index.js":"60","/code/src/components/layouts/Stakeholder/Stakeholder.jsx":"61","/code/src/components/layouts/InformationElement/InformationElement.jsx":"62","/code/src/components/layouts/Slider/Slider.jsx":"63","/code/src/components/layouts/Dropdown/Dropdown.jsx":"64","/code/src/components/layouts/ModalMenu/index.js":"65","/code/src/components/layouts/ModalMenu/ModalMenu.jsx":"66","/code/src/redux/actions/index.js":"67","/code/src/redux/actions/authActions.js":"68"},{"size":540,"mtime":1616859885444,"results":"69","hashOfConfig":"70"},{"size":362,"mtime":1607786260395,"results":"71","hashOfConfig":"70"},{"size":1212,"mtime":1621332818270,"results":"72","hashOfConfig":"70"},{"size":391,"mtime":1614975704084,"results":"73","hashOfConfig":"70"},{"size":267,"mtime":1621144170396,"results":"74","hashOfConfig":"70"},{"size":61,"mtime":1621052496683,"results":"75","hashOfConfig":"70"},{"size":52,"mtime":1621052485643,"results":"76","hashOfConfig":"70"},{"size":49,"mtime":1615043371606,"results":"77","hashOfConfig":"70"},{"size":55,"mtime":1615040244811,"results":"78","hashOfConfig":"70"},{"size":807,"mtime":1621332784773,"results":"79","hashOfConfig":"70"},{"size":3663,"mtime":1621406639243,"results":"80","hashOfConfig":"70"},{"size":4544,"mtime":1621407707072,"results":"81","hashOfConfig":"70"},{"size":3233,"mtime":1621227686432,"results":"82","hashOfConfig":"70"},{"size":29100,"mtime":1621404846592,"results":"83","hashOfConfig":"70"},{"size":2425,"mtime":1621320609021,"results":"84","hashOfConfig":"70"},{"size":438,"mtime":1620960841180,"results":"85","hashOfConfig":"70"},{"size":1405,"mtime":1621234533051,"results":"86","hashOfConfig":"70"},{"size":792,"mtime":1620960841179,"results":"87","hashOfConfig":"70"},{"size":1889,"mtime":1621226030987,"results":"88","hashOfConfig":"70"},{"size":471,"mtime":1621226462664,"results":"89","hashOfConfig":"70"},{"size":1174,"mtime":1621408880356,"results":"90","hashOfConfig":"70"},{"size":530,"mtime":1621332542689,"results":"91","hashOfConfig":"70"},{"size":326,"mtime":1620960841177,"results":"92","hashOfConfig":"70"},{"size":122,"mtime":1617799853291,"results":"93","hashOfConfig":"70"},{"size":16403,"mtime":1621332564616,"results":"94","hashOfConfig":"70"},{"size":209,"mtime":1621226447232,"results":"95","hashOfConfig":"70"},{"size":3915,"mtime":1621320851285,"results":"96","hashOfConfig":"70"},{"size":2270,"mtime":1621317692338,"results":"97","hashOfConfig":"70"},{"size":3199,"mtime":1621226557775,"results":"98","hashOfConfig":"70"},{"size":2642,"mtime":1621234767958,"results":"99","hashOfConfig":"70"},{"size":589,"mtime":1620960841173,"results":"100","hashOfConfig":"70"},{"size":5483,"mtime":1621317637783,"results":"101","hashOfConfig":"70"},{"size":2039,"mtime":1621319882118,"results":"102","hashOfConfig":"70"},{"size":3279,"mtime":1621233938831,"results":"103","hashOfConfig":"70"},{"size":4007,"mtime":1621332542708,"results":"104","hashOfConfig":"70"},{"size":1877,"mtime":1621332793315,"results":"105","hashOfConfig":"70"},{"size":52,"mtime":1621149547991,"results":"106","hashOfConfig":"70"},{"size":82,"mtime":1621154916735,"results":"107","hashOfConfig":"70"},{"size":55,"mtime":1615225040581,"results":"108","hashOfConfig":"70"},{"size":82,"mtime":1621154998847,"results":"109","hashOfConfig":"70"},{"size":46,"mtime":1615078643059,"results":"110","hashOfConfig":"70"},{"size":58,"mtime":1615219058338,"results":"111","hashOfConfig":"70"},{"size":49,"mtime":1615071417859,"results":"112","hashOfConfig":"70"},{"size":55,"mtime":1615043553473,"results":"113","hashOfConfig":"70"},{"size":340,"mtime":1620960841175,"results":"114","hashOfConfig":"70"},{"size":163,"mtime":1616859894226,"results":"115","hashOfConfig":"70"},{"size":792,"mtime":1620960841182,"results":"116","hashOfConfig":"70"},{"size":2565,"mtime":1621233123037,"results":"117","hashOfConfig":"70"},{"size":20990,"mtime":1621332542685,"results":"118","hashOfConfig":"70"},{"size":2564,"mtime":1621232967336,"results":"119","hashOfConfig":"70"},{"size":1448,"mtime":1621260112619,"results":"120","hashOfConfig":"70"},{"size":528,"mtime":1617799853286,"results":"121","hashOfConfig":"70"},{"size":2722,"mtime":1621404970713,"results":"122","hashOfConfig":"70"},{"size":2025,"mtime":1620960841162,"results":"123","hashOfConfig":"70"},{"size":724,"mtime":1615063282606,"results":"124","hashOfConfig":"70"},{"size":307,"mtime":1621332542689,"results":"125","hashOfConfig":"70"},{"size":70,"mtime":1616859885441,"results":"126","hashOfConfig":"70"},{"size":55,"mtime":1621332542687,"results":"127","hashOfConfig":"70"},{"size":91,"mtime":1616859885439,"results":"128","hashOfConfig":"70"},{"size":61,"mtime":1615063152748,"results":"129","hashOfConfig":"70"},{"size":29570,"mtime":1621259297113,"results":"130","hashOfConfig":"70"},{"size":28532,"mtime":1621320911662,"results":"131","hashOfConfig":"70"},{"size":459,"mtime":1621332542687,"results":"132","hashOfConfig":"70"},{"size":2708,"mtime":1621316920016,"results":"133","hashOfConfig":"70"},{"size":64,"mtime":1621404818724,"results":"134","hashOfConfig":"70"},{"size":516,"mtime":1621405458910,"results":"135","hashOfConfig":"70"},{"size":0,"mtime":1614975704083,"results":"136","hashOfConfig":"70"},{"size":1493,"mtime":1621407616629,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"a83vg7",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"140"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"140"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"140"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"140"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"140"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"140"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"140"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"140"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"140"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"140"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"140"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"140"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"/code/src/index.js",[],["290","291"],"/code/src/reportWebVitals.js",[],"/code/src/components/App.js",["292"],"import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { connect } from \"react-redux\";\n\n// pages\nimport Splash from \"./pages/Splash\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\n\n// Redux store\nimport store from \"../redux/store\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\nfunction App() {\n    setAuthToken(\"ee69594f98481738e89d2dab15ed582176a683cd\");\n\n    return (\n        <Router>\n            <Provider store={store}>\n                {/* <div className=\"app\"> */}\n                <Switch>\n                    <Route path=\"/login\">\n                        <Login />\n                    </Route>\n                    <Route path=\"/register\">\n                        <Register />\n                    </Route>\n                    <Route path=\"/dashboard\">\n                        <Splash />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n                {/* </div> */}\n            </Provider>\n        </Router>\n    );\n}\n\nexport default App;\n","/code/src/redux/store.js",[],"/code/src/utils/setAuthToken.js",[],"/code/src/components/pages/Register/index.js",[],"/code/src/components/pages/Login/index.js",[],"/code/src/components/pages/Home/index.js",[],"/code/src/components/pages/Splash/index.js",[],"/code/src/redux/reducers/index.js",[],"/code/src/components/pages/Login/Login.jsx",["293"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_login.scss\";\nimport logo from \"../../../assets/logo.png\";\nimport { login } from \"../../../redux/actions/authActions\";\n\nconst Login = ({ login }) => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        login({\n            email,\n            password\n        });\n    };\n\n    return (\n        <div className=\"login\">\n            <header className=\"login__header\">\n                <img className=\"login__header_logo\" src={logo} alt=\"\" />\n            </header>\n            <div className=\"login__body\">\n                <div className=\"login__left\">\n                    {/* <h1 className=\"login__h1\">Transpvis</h1> */}\n                    <div className=\"login__title\">\n                        <h1 className=\"login__h1\">\n                            Transparency <br /> Visual <br /> Analysis\n                        </h1>\n                        <p className=\"login__p\">\n                            The process of manipulating transparency\n                            requirements is very easy with the Transpvis\n                            platform. You can create your own applications and\n                            start simulating transparency requirements now.\n                        </p>\n                        <br />\n                        <br />\n                    </div>\n                </div>\n                <div className=\"login__right\">\n                    <div className=\"login__form\">\n                        {/* <h2>Login</h2> */}\n                        <form className=\"form\" onSubmit={handleSubmit}>\n                            <div className=\"form-group\">\n                                <span className=\"form-label\">Email</span>\n                                <input\n                                    type=\"email\"\n                                    placeholder=\"user@example.com\"\n                                    className=\"form-control\"\n                                    value={email}\n                                    onChange={e => {\n                                        setEmail(e.target.value);\n                                    }}\n                                    required\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <span className=\"form-label\">Password</span>\n                                <input\n                                    type=\"password\"\n                                    placeholder=\"****\"\n                                    className=\"form-control\"\n                                    value={password}\n                                    onChange={e => {\n                                        setPassword(e.target.value);\n                                    }}\n                                    required\n                                />\n                            </div>\n                            <button type=\"submit\" className=\"form-submit\">\n                                Sign in\n                            </button>\n                        </form>\n                    </div>\n                    <div className=\"login__register\">\n                        <p>Don't have an account yet? </p>\n                        <a href=\"#\">Register now</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapSateToProps = state => ({\n    // user: state.auth.user\n});\n\nexport default connect(mapSateToProps, { login })(Login);\n","/code/src/components/pages/Register/Register.jsx",["294"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_register.scss\";\nimport logo from \"../../../assets/logo.png\";\nimport { register } from \"../../../redux/actions/authActions\";\n\nconst Register = ({ register }) => {\n    const [username, setUsername] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        register({\n            firstName: username.split(\" \")[0],\n            lastName: username.split(\" \")[1],\n            email,\n            password\n        });\n    };\n\n    return (\n        <div className=\"register\">\n            <header className=\"register__header\">\n                <img className=\"register__header_logo\" src={logo} alt=\"\" />\n            </header>\n            <div className=\"register__body\">\n                <div className=\"register__left\">\n                    {/* <h1 className=\"register__h1\">Transpvis</h1> */}\n                    <div className=\"register__title\">\n                        <h1 className=\"register__h1\">\n                            Transparency <br /> Visual <br /> Analysis\n                        </h1>\n                        <p className=\"register__p\">\n                            The process of manipulating transparency\n                            requirements is very easy with the Transpvis\n                            platform. You can create your own applications and\n                            start simulating transparency requirements now.\n                        </p>\n                        <br />\n                        <br />\n                    </div>\n                </div>\n                <div className=\"register__right\">\n                    <div className=\"register__form\">\n                        {/* <h2>Login</h2> */}\n                        <form className=\"form\" onSubmit={handleSubmit}>\n                            <div className=\"form-group\">\n                                <span className=\"form-label\">Username</span>\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Amokrane Abdennour\"\n                                    className=\"form-control\"\n                                    value={username}\n                                    onChange={e => {\n                                        setUsername(e.target.value);\n                                    }}\n                                    required\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <span className=\"form-label\">Email</span>\n                                <input\n                                    type=\"email\"\n                                    placeholder=\"user@example.com\"\n                                    className=\"form-control\"\n                                    value={email}\n                                    onChange={e => {\n                                        setEmail(e.target.value);\n                                    }}\n                                    required\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <span className=\"form-label\">Password</span>\n                                <input\n                                    type=\"password\"\n                                    placeholder=\"****\"\n                                    className=\"form-control\"\n                                    value={password}\n                                    onChange={e => {\n                                        setPassword(e.target.value);\n                                    }}\n                                    required\n                                />\n                            </div>\n                            <button type=\"submit\" className=\"form-submit\">\n                                Register\n                            </button>\n                        </form>\n                    </div>\n                    <div className=\"register__register\">\n                        <p>Already have login and password? </p>\n                        <a href=\"#\">Sign in</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nconst mapSateToProps = state => ({\n    // user: state.auth.user\n});\n\nexport default connect(mapSateToProps, { register })(Register);\n","/code/src/components/pages/Splash/Splash.jsx",["295","296"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./_splash.scss\";\nimport logo from \"../../../assets/logo.png\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport Header from \"../../layouts/Header\";\nimport { toggleModal } from \"../../../redux/actions/modalActions\";\nimport {\n    setApplication,\n    getApplications\n} from \"../../../redux/actions/applicationActions\";\nimport { getStakeholders } from \"../../../redux/actions/stakeholderActions\";\nimport { getInformationElements } from \"../../../redux/actions/informationElementsActions\";\nimport { getRelationships } from \"../../../redux/actions/relationsActions\";\nimport ApplicationForm from \"../../forms/ApplicationForm\";\nimport Modal from \"../../layouts/Modal\";\n\nconst Splash = ({\n    applications,\n    toggleModal,\n    setApplication,\n    getApplications,\n    getStakeholders,\n    getInformationElements,\n    getRelationships\n}) => {\n    const history = useHistory();\n\n    useEffect(() => {\n        getApplications();\n    }, []);\n\n    const handleMenuClick = e => {\n        toggleModal();\n    };\n\n    const handleAppClick = (e, app) => {\n        e.preventDefault();\n        setApplication(app);\n        getStakeholders({ application: app });\n        getInformationElements({ application: app });\n        getRelationships({ stakeholder__application: app }).then(() => {\n            history.push(\"/\");\n        });\n    };\n\n    return (\n        <>\n            <Modal>\n                <ApplicationForm />\n            </Modal>\n\n            <Header></Header>\n            <div className=\"splash\">\n                <div className=\"splash__container\">\n                    <h2>Please choose an application to start</h2>\n                    <div className=\"splash__app_list\">\n                        <div\n                            className=\"splash__app\"\n                            title=\"Add new application\"\n                            onClick={e => {\n                                handleMenuClick(e);\n                            }}\n                        >\n                            <p>\n                                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n                            </p>\n                        </div>\n                        {applications?.map(app => (\n                            <div\n                                className=\"splash__app\"\n                                title={app.name}\n                                onClick={e => {\n                                    handleAppClick(e, app.id);\n                                }}\n                                key={app.id}\n                            >\n                                <h4>{app.name}</h4>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    applications: state.application.applications\n});\n\nexport default connect(mapSateToProps, {\n    toggleModal,\n    setApplication,\n    getApplications,\n    getStakeholders,\n    getInformationElements,\n    getRelationships\n})(Splash);\n","/code/src/components/pages/Home/Home.jsx",["297","298","299","300"],"import { React, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Skeleton from \"react-loading-skeleton\";\n\n// Actions\nimport { toggleHelp } from \"../../../redux/actions/helpActions\";\nimport {\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused\n} from \"../../../redux/actions/applicationActions\";\n\nimport Header from \"../../layouts/Header\";\nimport Card from \"../../layouts/Card\";\nimport Tag from \"../../layouts/Tag\";\nimport Control from \"../../layouts/Control\";\nimport Detail from \"../../layouts/Detail\";\nimport Modal from \"../../layouts/Modal\";\nimport ModalMenu from \"../../layouts/ModalMenu\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faExpand,\n    // faSearchPlus,\n    // faSearchMinus ,\n    faCompress\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./_home.scss\";\nimport { colors } from \"../../../utils/colors\";\nimport Visualization from \"../../layouts/Visualization/Visualization\";\nimport {\n    overed,\n    outed,\n    clicked,\n    setPrimaryAnimation,\n    unsetPrimaryAnimation\n} from \"../../../utils/d3\";\n\nimport { toggleModal } from \"../../../redux/actions/modalActions\";\nimport StakeholderForm from \"../../forms/StakeholderForm\";\nimport InformationElementForm from \"../../forms/InformationElementForm/InformationElementForm\";\nimport InformationElementAssociationForm from \"../../forms/InformationElementAssociationForm/InformationElementAssociationForm\";\nimport StakeholderInformationElementRelationshipForm from \"../../forms/StakeholderInformationElementRelationshipForm/StakeholderInformationElementRelationshipForm\";\n\nconst Home = ({\n    application,\n    stakeholder,\n    informationElement,\n    relationship,\n    help,\n    viz,\n    type,\n\n    setFocused,\n    removeFocused,\n    toggleHelp,\n    toggleModal\n}) => {\n    const [expanded, setExpanded] = useState(true);\n    const [endingHelp, setEndingHelp] = useState(false);\n    const handleToggleViz = () => {\n        setExpanded(!expanded);\n    };\n\n    useEffect(() => {}, []);\n\n    const handleCardClick = (event, element) => {\n        event.preventDefault();\n        if (!application.focused) {\n            setPrimaryAnimation(\n                event,\n                viz.root\n                    .leaves()\n                    .find(node => node.data.label === element.label)\n            );\n            setFocused(element);\n        } else {\n            if (application.focused === element) {\n                unsetPrimaryAnimation(\n                    event,\n                    viz.root\n                        .leaves()\n                        .find(node => node.data.label === element.label)\n                );\n                removeFocused(element);\n            } else {\n                unsetPrimaryAnimation(\n                    event,\n                    viz.root\n                        .leaves()\n                        .find(\n                            node =>\n                                node.data.label === application.focused.label\n                        )\n                );\n                setTimeout(() => {\n                    setPrimaryAnimation(\n                        event,\n                        viz.root\n                            .leaves()\n                            .find(node => node.data.label === element.label)\n                    );\n                }, 400);\n                setFocused(element);\n            }\n        }\n    };\n\n    const endHelp = () => {\n        setEndingHelp(true);\n        setTimeout(() => {\n            toggleHelp();\n            setEndingHelp(false);\n        }, 500);\n    };\n\n    const renderForm = () => {\n        switch (type) {\n            case \"stakeholder\":\n                return <StakeholderForm />;\n            case \"information-element\":\n                return <InformationElementForm />;\n            case \"ie-association\":\n                return <InformationElementAssociationForm />;\n            case \"stakeholder-information-element-relationship\":\n                return <StakeholderInformationElementRelationshipForm />;\n            case \"menu\":\n                return <ModalMenu />;\n            default:\n                break;\n        }\n    };\n\n    const handleMenuClick = (e, type) => {\n        toggleModal(type);\n    };\n\n    return (\n        <>\n            <Modal>{renderForm()}</Modal>\n            <div className=\"home\">\n                {(help || endingHelp) && (\n                    <>\n                        <div\n                            className={\n                                \"home__help fromTop \" +\n                                (endingHelp ? \"fromBottom\" : \"\")\n                            }\n                            onClick={() => {\n                                endHelp();\n                            }}\n                        >\n                            <span>Exit help mode</span>\n                        </div>\n                    </>\n                )}\n\n                <Header />\n\n                <div className=\"home__content\">\n                    <div className=\"home__top\">\n                        <Control />\n                    </div>\n                    <div className=\"home__bottom\">\n                        <div\n                            className={\n                                \"home__grid\" + (expanded ? \"\" : \"-expanded\")\n                            }\n                        >\n                            <div className=\"home__left\">\n                                <div className=\"home__navigation\">\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#4A6FA5\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Stakeholders\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>Stakeholders</b> are\n                                                        the people that use the\n                                                        service or the software,\n                                                        departements,\n                                                        organisations, etc.,\n                                                        which are involved in\n                                                        the information exchange\n                                                        process, providing,\n                                                        receiving, or requesting\n                                                        transparency. We can\n                                                        group stakeholders by\n                                                        one entity, for example\n                                                        User or IT Department.\n                                                        However, the exchanged\n                                                        information within an\n                                                        information exchange\n                                                        system may concern all\n                                                        stakeholders within that\n                                                        system, or it may\n                                                        concern the public\n                                                        audience.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#FB5012\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Policy\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>\n                                                            Policy transparency\n                                                        </b>{\" \"}\n                                                        every question whose\n                                                        answer provides goals,\n                                                        intentions, policies and\n                                                        decision making is a\n                                                        policy transparency\n                                                        question. “Why?” is the\n                                                        main question here,\n                                                        i.e., why certain action\n                                                        is performed or for what\n                                                        reason this action is\n                                                        performed in the context\n                                                        of transparency. For\n                                                        example, in a hosting\n                                                        service platform, policy\n                                                        transparency reveals why\n                                                        encryption is needed in\n                                                        servers, or why I have a\n                                                        limited storage\n                                                        capacity.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#61C9A8\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Process\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>\n                                                            Process transparency\n                                                        </b>{\" \"}\n                                                        every question whose\n                                                        answer provides\n                                                        procedures, processes,\n                                                        behaviours and\n                                                        interactions is a\n                                                        process transparency\n                                                        question. “How?” is the\n                                                        main question here,\n                                                        i.e., how something is\n                                                        performed or done in the\n                                                        context of transparency.\n                                                        For example in a hosting\n                                                        service platform,\n                                                        process transparency\n                                                        reveals how data is\n                                                        encrypted in the\n                                                        servers, and how servers\n                                                        are immune from cyber\n                                                        attacks.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#FFDA0A\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Data\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>Data transparency</b>{\" \"}\n                                                        every question whose\n                                                        answer provides data,\n                                                        content or information\n                                                        is a data transparency\n                                                        question. “What? When?\n                                                        Where? Who?” These\n                                                        questions primarily\n                                                        answer what information\n                                                        is needed and who are\n                                                        the stakeholders in the\n                                                        context of transparency.\n                                                        For example, in a\n                                                        hosting service\n                                                        platform, data\n                                                        transparency reveals the\n                                                        server's performances to\n                                                        the client for each\n                                                        plan, and the price of\n                                                        each plan.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                </div>\n                                <br />\n                                <div\n                                    className=\"d-flex\"\n                                    style={{ marginBottom: \"20px\" }}\n                                >\n                                    <h3\n                                        style={{\n                                            margin: \"0\",\n                                            marginTop: \"-1px\"\n                                        }}\n                                        className={help ? \"tip\" : \"\"}\n                                        data-tip=\"1\"\n                                    >\n                                        Stakeholders\n                                        {help && (\n                                            <div className=\"tooltip__wrapper\">\n                                                <span className=\"help__text\">\n                                                    <b>Stakeholders</b> are the\n                                                    people that use the service\n                                                    or the software,\n                                                    departements, organisations,\n                                                    etc., which are involved in\n                                                    the information exchange\n                                                    process, providing,\n                                                    receiving, or requesting\n                                                    transparency. We can group\n                                                    stakeholders by one entity,\n                                                    for example User or IT\n                                                    Department. However, the\n                                                    exchanged information within\n                                                    an information exchange\n                                                    system may concern all\n                                                    stakeholders within that\n                                                    system, or it may concern\n                                                    the public audience.\n                                                </span>\n                                            </div>\n                                        )}\n                                    </h3>\n                                    {stakeholder.loading ? (\n                                        <Tag isLoading={true} />\n                                    ) : (\n                                        <Tag\n                                            content={\n                                                stakeholder.stakeholders?.length\n                                            }\n                                            color=\"#3d4659\"\n                                        />\n                                    )}\n                                </div>\n                                <Card\n                                    addNew={true}\n                                    title={\"add new stakeholder\"}\n                                    onClick={e => {\n                                        handleMenuClick(e, \"stakeholder\");\n                                    }}\n                                />\n\n                                {stakeholder.loading ? (\n                                    <>\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                    </>\n                                ) : !stakeholder.stakeholders ||\n                                  !stakeholder.stakeholders.length ? (\n                                    <div>Empty...</div>\n                                ) : (\n                                    <>\n                                        {stakeholder.stakeholders.map(s => (\n                                            <Card\n                                                id={`card-${s.id}`}\n                                                key={s.id}\n                                                label={s.label}\n                                                name={s.name}\n                                                color=\"#4A6FA5\"\n                                                onClick={e =>\n                                                    handleCardClick(e, s)\n                                                }\n                                            />\n                                        ))}\n                                    </>\n                                )}\n                                <br />\n                                <div\n                                    className=\"d-flex\"\n                                    style={{ marginBottom: \"20px\" }}\n                                >\n                                    <h3\n                                        style={{\n                                            margin: \"0\",\n                                            marginTop: \"-1px\"\n                                        }}\n                                        className={help ? \"tip\" : \"\"}\n                                        data-tip=\"1\"\n                                    >\n                                        Information elements\n                                        {help && (\n                                            <div className=\"tooltip__wrapper\">\n                                                <span className=\"help__text\">\n                                                    <b>Information elements</b>{\" \"}\n                                                    are pieces of information\n                                                    exchanged amongst\n                                                    stakeholders. IPs or\n                                                    information providers are\n                                                    responsible for form and\n                                                    present the information to\n                                                    the IRs or information\n                                                    receivers. The way the{\" \"}\n                                                    <b>information elements</b>{\" \"}\n                                                    are formed and presented to\n                                                    others is affected by\n                                                    stakeholders’ transparency\n                                                    requirements. There are\n                                                    three different types of\n                                                    information elements,\n                                                    related to their\n                                                    transparency meaningfulness.\n                                                    These types are as follows:{\" \"}\n                                                    <b>data</b> type,{\" \"}\n                                                    <b>process</b> type, or{\" \"}\n                                                    <b>policy</b> type.\n                                                </span>\n                                            </div>\n                                        )}\n                                    </h3>\n                                    {informationElement.loading ? (\n                                        <Tag isLoading={true} />\n                                    ) : (\n                                        <Tag\n                                            content={\n                                                informationElement\n                                                    .informationElements?.length\n                                            }\n                                            color=\"#3d4659\"\n                                        />\n                                    )}\n                                </div>\n                                <Card\n                                    title={\"add new information element\"}\n                                    addNew={true}\n                                    onClick={e => {\n                                        handleMenuClick(\n                                            e,\n                                            \"information-element\"\n                                        );\n                                    }}\n                                />\n\n                                {informationElement.loading ? (\n                                    <>\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                    </>\n                                ) : !informationElement.informationElements ||\n                                  !informationElement.informationElements\n                                      .length ? (\n                                    <div>Empty...</div>\n                                ) : (\n                                    <>\n                                        {informationElement.informationElements.map(\n                                            ie => (\n                                                <Card\n                                                    id={`card-${ie.id}`}\n                                                    key={ie.id}\n                                                    label={ie.label}\n                                                    name={ie.name}\n                                                    color={colors[ie.type]}\n                                                    onClick={e =>\n                                                        handleCardClick(e, ie)\n                                                    }\n                                                />\n                                            )\n                                        )}\n                                    </>\n                                )}\n                            </div>\n                            <div className=\"home__middle\">\n                                <div\n                                    className=\"home__expand\"\n                                    style={{ right: expanded ? \"14px\" : 0 }}\n                                >\n                                    <FontAwesomeIcon\n                                        icon={expanded ? faExpand : faCompress}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                        onClick={handleToggleViz}\n                                    />\n                                    {/* <FontAwesomeIcon\n                                        icon={faSearchPlus}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                    />\n                                    <FontAwesomeIcon\n                                        icon={faSearchMinus}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                    /> */}\n                                </div>\n                                <Visualization />\n                            </div>\n                            <div\n                                className={\n                                    \"home__right\" +\n                                    (expanded ? \"\" : \"-expanded\")\n                                }\n                            >\n                                <Detail />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    relationship: state.relationship,\n    help: state.help.help,\n    viz: state.viz,\n    type: state.modal.type\n});\n\nexport default connect(mapSateToProps, {\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused,\n    toggleHelp,\n    toggleModal\n})(Home);\n","/code/src/redux/reducers/informationElementReducer.js",[],"/code/src/redux/reducers/vizReducer.js",[],"/code/src/redux/reducers/stakeholderReducer.js",[],"/code/src/redux/reducers/relationshipReducer.js",[],"/code/src/redux/reducers/applicationReducer.js",[],"/code/src/redux/reducers/modalReducer.js",["301"],"import { TOGGLE_MODAL } from \"../types\";\n\nconst initialState = {\n    opened: false,\n    type: \"\",\n    relation: \"\"\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_MODAL:\n            return {\n                ...state,\n                opened: !state.opened,\n                type: action.payload.type,\n                relation: action.payload.relation\n            };\n\n        default:\n            return state;\n    }\n};\n","/code/src/redux/reducers/authReducer.js",["302"],"/code/src/redux/reducers/configReducer.js",[],"/code/src/redux/reducers/helpReducer.js",[],"/code/src/utils/colors.js",[],"/code/src/utils/d3.js",["303","304","305","306","307","308","309","310","311","312","313","314","315","316","317"],"import store from \"../redux/store\";\nimport { setRoot } from \"../redux/actions/vizActions\";\nimport { setFocused, removeFocused } from \"../redux/actions/applicationActions\";\nimport { SET_FOCUSED, REMOVE_FOCUSED } from \"../redux/types\";\n\nexport const d3 = require(\"d3\");\n\nconst colornone = \"#ccc\";\n\nvar colorStakeholder = \"#4A6FA5\";\nvar colorData = \"#FFDA0A\";\nvar colorProcess = \"#61C9A8\";\nvar colorPolicy = \"#FB5012\";\n\nexport function setPrimaryAnimation(event, d) {\n    const config = store.getState().config;\n\n    const text = d3.select(d.text);\n    text.attr(\"font-weight\", \"bold\");\n    text.transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", +config.textSize + 0.5);\n    text.style(\n        \"fill\",\n        eval(\n            `color${d.data.group.charAt(0).toUpperCase() +\n                d.data.group.slice(1)}`\n        )\n    );\n    d3.selectAll(d.incoming.map(d => d.path))\n        .data(d.incoming.map(d => d[0]))\n        .attr(\"stroke\", t =>\n            eval(\n                `color${t.data.group.charAt(0).toUpperCase() +\n                    t.data.group.slice(1)}`\n            )\n        )\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-dasharray\", 1500 + \" \" + 1500)\n        .attr(\"stroke-dashoffset\", 1500)\n        .transition()\n        .duration(1500)\n        .ease(d3.easeLinear)\n        .attr(\"stroke-dashoffset\", 0);\n    d3.selectAll(d.outgoing.map(d => d.path))\n        .attr(\n            \"stroke\",\n            eval(\n                `color${d.data.group.charAt(0).toUpperCase() +\n                    d.data.group.slice(1)}`\n            )\n        )\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-dasharray\", 1500 + \" \" + 1500)\n        .attr(\"stroke-dashoffset\", 1500)\n        .transition()\n        .duration(1500)\n        .ease(d3.easeLinear)\n        .attr(\"stroke-dashoffset\", 0);\n    const textsOutgoing = d3.selectAll(d.outgoing.map(([, d]) => d.text));\n    textsOutgoing.attr(\"font-weight\", \"bold\");\n    textsOutgoing\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", +config.textSize + 0.5);\n    const textsIncoming = d3.selectAll(d.incoming.map(d => d[0].text));\n    textsIncoming.attr(\"font-weight\", \"bold\");\n    textsIncoming\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", +config.textSize + 0.5);\n\n    const root = store.getState().viz.root;\n    d3.selectAll(\n        root\n            .leaves()\n            .filter(node => node.data.label !== d.data.label)\n            .filter(node => !d.outgoing.map(d => d[1]).includes(node))\n            .filter(node => !d.incoming.map(d => d[0]).includes(node))\n            .map(node => node.text)\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \".3\");\n    d3.selectAll(\n        root\n            .leaves()\n            .map(node =>\n                node.incoming\n                    .map(n => n.path)\n                    .concat(node.incoming.map(n => n.path))\n            )\n            .flat()\n            .filter(\n                path =>\n                    !d.incoming.map(d => d.path).includes(path) &&\n                    !d.outgoing.map(d => d.path).includes(path)\n            )\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \".3\");\n\n    d3.selectAll(\n        root\n            .leaves()\n            .filter(node => node.data.label !== d.data.label)\n            .filter(node => !d.outgoing.map(d => d[1]).includes(node))\n            .filter(node => !d.incoming.map(d => d[0]).includes(node))\n            .map(node => node.circle)\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \".5\")\n        .attr(\"r\", 6); // set the radius\n\n    d3.select(d.circle)\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 10); // set the radius\n    d3.selectAll(d.outgoing.map(d => d[1].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 10); // set the radius\n    d3.selectAll(d.incoming.map(d => d[0].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 10); // set the radius\n}\n\nexport function unsetPrimaryAnimation(event, d) {\n    const config = store.getState().config;\n    d3.select(d.text).attr(\"font-weight\", \"normal\");\n    d3.select(d.text).style(\"fill\", \"#3D4758\");\n\n    d3.selectAll(d.incoming.map(d => d.path))\n        .attr(\"stroke\", null)\n        .attr(\"stroke-width\", 1);\n\n    d3.selectAll(d.incoming.map(([d]) => d.text))\n        .attr(\"fill\", null)\n        .attr(\"font-weight\", null);\n    d3.selectAll(d.outgoing.map(d => d.path))\n        .attr(\"stroke\", null)\n        .attr(\"stroke-width\", 1);\n\n    d3.selectAll(d.outgoing.map(([, d]) => d.text))\n        .attr(\"fill\", null)\n        .attr(\"font-weight\", null);\n    d3.selectAll(d.incoming.map(d => d[0].text)).attr(\"font-weight\", \"normal\");\n\n    const root = store.getState().viz.root;\n    const texts = d3.selectAll(root.leaves().map(node => node.text));\n    texts\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", +config.textSize);\n    texts\n        .transition()\n        .delay(200)\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", 1);\n\n    d3.selectAll(\n        root\n            .leaves()\n            .map(node => node.incoming.map(n => n.path))\n            .flat()\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \"1\");\n    d3.selectAll(\n        root\n            .leaves()\n            .map(node => node.outgoing.map(n => n.path))\n            .flat()\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \"1\");\n\n    d3.selectAll(\n        root\n            .leaves()\n            .filter(node => node.data.label !== d.data.label)\n            .filter(node => !d.outgoing.map(d => d[1]).includes(node))\n            .filter(node => !d.incoming.map(d => d[0]).includes(node))\n            .map(node => node.circle)\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \"1\")\n        .attr(\"r\", 8); // set the radius\n\n    d3.select(d.circle)\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 8); // set the radius\n    d3.selectAll(d.outgoing.map(d => d[1].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 8); // set the radius\n    d3.selectAll(d.incoming.map(d => d[0].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 8); // set the radius\n}\n\n// Primary animation (onClick)\nexport function clicked(event, d) {\n    let element = {};\n    if (d.data.group === \"stakeholder\") {\n        element = store\n            .getState()\n            .stakeholder.stakeholders.find(\n                element => element.label === d.data.label\n            );\n    } else {\n        element = store\n            .getState()\n            .informationElement.informationElements.find(\n                element => element.label === d.data.label\n            );\n    }\n    if (!store.getState().application.focused) {\n        setPrimaryAnimation(event, d);\n        store.dispatch({\n            type: SET_FOCUSED,\n            payload: element\n        });\n    } else {\n        if (store.getState().application.focused === element) {\n            unsetPrimaryAnimation(event, d);\n            store.dispatch({\n                type: REMOVE_FOCUSED\n            });\n        } else {\n            unsetPrimaryAnimation(\n                event,\n                store\n                    .getState()\n                    .viz.root.leaves()\n                    .find(\n                        node =>\n                            node.data.label ===\n                            store.getState().application.focused.label\n                    )\n            );\n            setTimeout(() => {\n                setPrimaryAnimation(event, d);\n            }, 400);\n            store.dispatch({\n                type: SET_FOCUSED,\n                payload: element\n            });\n        }\n    }\n}\n\n//change link style based on the event(mouseover) Secondary animation\nexport function overed(event, d) {\n    return null;\n}\n\n//in outed state, made everything reseted\nexport function outed(event, d) {\n    return null;\n}\n\nconst handleRotateText = d => {\n    if (d.x >= Math.PI) {\n        if (d.x > Math.PI && d.x < (3 * Math.PI) / 2 - 0.5) {\n            return \"rotate(-180)\";\n        } else {\n            return \"rotate(-180)\";\n        }\n    } else {\n        if (d.x > Math.PI / 2 + 0.5 && d.x < (3 * Math.PI) / 2) {\n            return null;\n        } else {\n            return null;\n        }\n    }\n};\n\nexport const chart = (svg, { nodes, links }) => {\n    const config = store.getState().config;\n\n    function degrees_to_radians(degrees) {\n        var pi = Math.PI;\n        return degrees * (pi / 180);\n    }\n\n    const radius = config.radius;\n    const tree = d3.cluster().size([degrees_to_radians(config.extent), radius]);\n\n    const line = d3\n        .lineRadial()\n        .curve(d3.curveBundle.beta(config.tension))\n        .radius(d => d.y)\n        .angle(d => d.x);\n\n    const width = 1100;\n\n    function bilink(root) {\n        const map = new Map(root.leaves().map(d => [d.data.label, d]));\n\n        for (const d of root.leaves()) {\n            d.incoming = [];\n            d.outgoing = d.data.targets.map(i => [d, map.get(i)]);\n        }\n        for (const d of root.leaves()) {\n            for (const o of d.outgoing) {\n                o[1].incoming.push(o);\n            }\n        }\n        return root;\n    }\n\n    const data_ = ({ nodes, links }) => {\n        const groupById = new Map();\n        const nodeById = new Map(nodes.map(node => [node.label, node]));\n\n        for (const node of nodes) {\n            let group = groupById.get(node.group);\n            if (!group) {\n                groupById.set(\n                    node.group,\n                    (group = { label: node.group, children: [] })\n                );\n            }\n            group.children.push(node);\n            node.targets = [];\n        }\n\n        for (const { source: sourceId, target: targetId } of links) {\n            nodeById.get(sourceId).targets.push(targetId);\n        }\n\n        return { children: [...groupById.values()] };\n    };\n\n    const findStartAngle = children => {\n        if (children[0].x > children[children.length - 1].x) {\n            return config.extent >= 300\n                ? children[children.length - 1].x + 2 * Math.PI + 0.3\n                : children[children.length - 1].x + 2 * Math.PI + 0.1;\n        }\n\n        var min = children[0].x;\n        children.forEach(function(d) {\n            if (d.x < min) min = d.x;\n        });\n        return config.extent >= 300 ? min - 0.3 : min - 0.1;\n    };\n\n    const findEndAngle = children => {\n        if (children[0].x > children[children.length - 1].x) {\n            return config.extent >= 300\n                ? children[0].x - 0.3\n                : children[0].x - 0.1;\n        }\n\n        var max = children[0].x;\n        children.forEach(function(d) {\n            if (d.x > max) max = d.x;\n        });\n        return config.extent >= 300 ? max + 0.3 : max + 0.1;\n    };\n\n    const rotateViz = (deg, root) => {\n        root.x += degrees_to_radians(deg) % (2 * Math.PI);\n        root.x %= 2 * Math.PI;\n        root.children.map(element => {\n            element.x += degrees_to_radians(deg);\n            element.x %= 2 * Math.PI;\n            element.children.map(node => {\n                node.x += degrees_to_radians(deg) % (2 * Math.PI);\n                node.x %= 2 * Math.PI;\n                return node;\n            });\n            return element;\n        });\n        return root;\n    };\n\n    const data = data_({ nodes, links });\n\n    const nodeById = new Map(nodes.map(node => [node.label, node]));\n\n    let root = tree(\n        bilink(\n            d3\n                .hierarchy(data)\n                .sort(\n                    (a, b) =>\n                        d3.ascending(a.height, b.height) ||\n                        d3.ascending(a.data.label, b.data.label)\n                )\n        )\n    );\n    root = rotateViz(config.rotate, root);\n    setRoot(root, store.dispatch);\n    svg.attr(\"viewBox\", [-width / 2 + 30, -width / 2, width, width]);\n\n    // 🏛\n    const arcWidth = 10;\n    const arc = d3\n        .arc()\n        .innerRadius(+radius + 6 - arcWidth)\n        .outerRadius(+radius + 6 + arcWidth)\n        .startAngle(d => findStartAngle(d.children))\n        .endAngle(d => findEndAngle(d.children))\n        .cornerRadius(5);\n\n    //arc drawing\n    const arcDraw = svg\n        .append(\"g\")\n        .selectAll(\"g\")\n        .data(root.descendants().filter(d => d.height === 1))\n        .join(\"g\")\n        .append(\"path\")\n        .attr(\"d\", d => arc(d))\n        .attr(\"fill\", d =>\n            eval(\n                `color${d.data.label.charAt(0).toUpperCase() +\n                    d.data.label.slice(1)}`\n            )\n        )\n        .style(\"opacity\", \".2\");\n\n    const node = svg\n        .append(\"g\")\n        .attr(\"fill\", \"#3D4758\")\n        .selectAll(\"g\")\n        .data(root.leaves())\n        .join(\"g\")\n        .attr(\n            \"transform\",\n            d => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`\n        )\n        .append(\"text\")\n        .attr(\"font-size\", +config.textSize)\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"dx\", d =>\n            d.x >= Math.PI\n                ? `-${config.textOffset}em`\n                : `${config.textOffset}em`\n        )\n        .attr(\"x\", d => (d.x < Math.PI ? 15 : -15))\n        .attr(\"text-anchor\", d => (d.x < Math.PI ? \"start\" : \"end\"))\n        .attr(\"transform\", d => handleRotateText(d))\n        .style(\"cursor\", \"pointer\")\n        .style(\"user-select\", \"none\")\n        .text(d => nodeById.get(d.data.label)[config.textMode])\n        //for eadh node,\n        .each(function(d) {\n            d.text = this;\n        })\n        //overed is the behaviour when we have a mouseover on one of the elements(nodes)\n        .on(\"mouseover\", overed)\n        .on(\"mouseout\", outed)\n        .on(\"click\", clicked)\n        .call(text =>\n            text.append(\"title\").text(d => `${nodeById.get(d.data.label).name}`)\n        );\n\n    //link drawing\n    const link = svg\n        .append(\"g\")\n        .attr(\"stroke\", colornone)\n        .attr(\"fill\", \"none\")\n        .selectAll(\"path\")\n        .data(root.leaves().flatMap(leaf => leaf.outgoing))\n        .join(\"path\")\n        .style(\"mix-blend-mode\", \"darken\")\n        .attr(\"d\", ([i, o]) => line(i.path(o)))\n        .each(function(d) {\n            d.path = this;\n        });\n\n    const circle = svg\n        .append(\"g\")\n        .selectAll(\"g\")\n        .data(root.leaves())\n        .join(\"g\")\n        .attr(\n            \"transform\",\n            d => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`\n        )\n\n        .append(\"circle\") // attach a circle\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"cx\", d => (d.x < Math.PI ? 6 : -6))\n        .attr(\"transform\", d => (d.x >= Math.PI ? \"rotate(180)\" : null))\n\n        .attr(\"r\", d => 8) // set the radius\n        .style(\"fill\", d =>\n            eval(\n                `color${d.data.group.charAt(0).toUpperCase() +\n                    d.data.group.slice(1)}`\n            )\n        )\n        .each(function(d) {\n            d.circle = this;\n        })\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", clicked);\n\n    // circle\n    //     .transition()\n    //     .duration(200)\n    //     .ease(d3.easeLinear)\n    //     .attr(\"r\", d => 8); // set the radius\n\n    // check if there is a selected element\n    if (store.getState().application.focused !== null) {\n        setTimeout(() => {\n            setPrimaryAnimation(\n                null,\n                store\n                    .getState()\n                    .viz.root.leaves()\n                    .find(\n                        node =>\n                            node.data.label ===\n                            store.getState().application.focused.label\n                    )\n            );\n        }, 300);\n    }\n\n    return svg.node();\n};\n","/code/src/redux/actions/modalActions.js",[],"/code/src/redux/actions/informationElementsActions.js",[],"/code/src/redux/actions/relationsActions.js",[],"/code/src/redux/actions/applicationActions.js",["318"],"import axios from \"axios\";\n\nimport {\n    GET_APPLICATIONS,\n    SET_APPLICATION,\n    SET_FOCUSED,\n    REMOVE_FOCUSED,\n    TOGGLE_LOADING_APPLICATION,\n    CREATE_APPLICATION,\n    UPDATE_APPLICATION,\n    DELETE_APPLICATION\n} from \"../types\";\nimport { environment } from \"../../utils/environment\";\nimport { toggleModal } from \"../actions/modalActions\";\n\n// Get applications\nexport const getApplications = (params = {}) => async dispatch => {\n    try {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        const url = environment.apiEndpoint;\n        const res = await axios.get(url + \"applications/\", {\n            params: { ...params }\n        });\n\n        dispatch({\n            type: GET_APPLICATIONS,\n            payload: res.data\n        });\n    } catch (error) {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        console.error(\"Error get application: \", error);\n    }\n};\n\n// Create an application\nexport const createApplication = formData => async dispatch => {\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    };\n    try {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        const url = environment.apiEndpoint;\n        const res = await axios.post(url + \"applications/\", formData, config);\n        dispatch({ type: CREATE_APPLICATION, payload: res.data });\n    } catch (error) {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        console.error(\"Error create application: \", error);\n    }\n};\n\n// Update an application\nexport const updateApplication = appId => formData => async dispatch => {\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    };\n    try {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        const url = environment.apiEndpoint;\n        const res = await axios.patch(\n            url + `applications/${appId}`,\n            formData,\n            config\n        );\n        dispatch({ type: UPDATE_APPLICATION, payload: res.data });\n    } catch (error) {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        console.error(\"Error updating application: \", error);\n    }\n};\n\n// Delete an application\nexport const deleteApplication = appId => async dispatch => {\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    };\n    try {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        const url = environment.apiEndpoint;\n        const res = await axios.delete(url + `applications/${appId}`, config);\n        dispatch({ type: DELETE_APPLICATION, payload: res.data });\n    } catch (error) {\n        dispatch({ type: TOGGLE_LOADING_APPLICATION });\n        console.error(\"Error deleting application: \", error);\n    }\n};\n\n// Set application\nexport const setApplication = appId => async dispatch => {\n    dispatch({\n        type: SET_APPLICATION,\n        payload: appId\n    });\n};\n\n// Set focused\nexport const setFocused = element => async dispatch => {\n    dispatch({\n        type: SET_FOCUSED,\n        payload: element\n    });\n};\n\n// Remove focused\nexport const removeFocused = () => async dispatch => {\n    dispatch({\n        type: REMOVE_FOCUSED\n    });\n};\n","/code/src/redux/actions/stakeholderActions.js",[],"/code/src/redux/actions/helpActions.js",[],"/code/src/components/forms/StakeholderInformationElementRelationshipForm/StakeholderInformationElementRelationshipForm.jsx",[],"/code/src/components/forms/InformationElementAssociationForm/InformationElementAssociationForm.jsx",[],"/code/src/components/forms/InformationElementForm/InformationElementForm.jsx",["319"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_informationelementform.scss\";\n\nimport { toggleModal } from \"../../../redux/actions/modalActions\";\nimport { createInformationElement } from \"../../../redux/actions/informationElementsActions\";\n\nconst InformationElementForm = ({\n    application,\n    toggleModal,\n    createInformationElement\n}) => {\n    const [name, setName] = useState(\"\");\n    const [type, setType] = useState(\"data\");\n    const [description, setDescription] = useState(\"\");\n    const [weight, setWeight] = useState(1);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        createInformationElement({\n            name,\n            type,\n            description,\n            weight,\n            application: application.id\n        });\n        toggleModal();\n    };\n    return (\n        <form className=\"form-modal\" onSubmit={handleSubmit}>\n            <h3>New Information element</h3>\n            <div className=\"form-group\">\n                <span className=\"form-label-req\">Name*</span>\n                <input\n                    type=\"text\"\n                    placeholder=\"ex. Personal Information\"\n                    className=\"form-control\"\n                    value={name}\n                    onChange={e => {\n                        setName(e.target.value);\n                    }}\n                />\n            </div>\n            <div className=\"form-group\">\n                <span className=\"form-label-req\">Type*</span>\n                <select\n                    value={type}\n                    onChange={e => {\n                        setType(e.target.value);\n                    }}\n                    className=\"form-control\"\n                >\n                    <option value=\"data\">Data</option>\n                    <option value=\"process\">Process</option>\n                    <option value=\"policy\">Policy</option>\n                </select>\n            </div>\n            <div className=\"form-group\">\n                <span className=\"form-label\">Description</span>\n                <textarea\n                    cols=\"30\"\n                    rows=\"4\"\n                    placeholder=\"Add a brief description about the Information element here...\"\n                    className=\"form-control\"\n                    value={description}\n                    onChange={e => {\n                        setDescription(e.target.value);\n                    }}\n                />\n            </div>\n            <div className=\"form-group\">\n                <span className=\"form-label\">Weight</span>\n                <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"1\"\n                    value=\"1\"\n                    className=\"form-control\"\n                    value={weight}\n                    onChange={e => {\n                        setWeight(e.target.value);\n                    }}\n                />\n            </div>\n            <button type=\"submit\" className=\"form-submit\">\n                Add\n            </button>\n        </form>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application.application\n});\n\nexport default connect(mapSateToProps, {\n    toggleModal,\n    createInformationElement\n})(InformationElementForm);\n","/code/src/components/layouts/Visualization/Visualization.jsx",["320","321"],"import React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_visualization.scss\";\nimport { chart } from \"../../../utils/d3\";\nimport { setJsonData } from \"../../../redux/actions/vizActions\";\n\nimport { select } from \"d3\";\nexport const d3 = require(\"d3\");\n\nconst Visualization = ({\n    application,\n    stakeholder,\n    informationElement,\n    relationship,\n    jsonData,\n    config,\n    setJsonData\n}) => {\n    const svgRef = useRef(null);\n\n    const drawViz = ({ nodes, links }) => {\n        const svg = select(svgRef.current);\n\n        chart(svg, { nodes, links });\n    };\n\n    const getVizData = () => {\n        let data = {};\n        data.nodes = [];\n        data.links = [];\n        stakeholder.stakeholders.forEach(stakeholder => {\n            data.nodes.push({\n                id: stakeholder.id,\n                label: stakeholder.label,\n                name: stakeholder.name,\n                group: \"stakeholder\",\n                weight: stakeholder.weight\n            });\n        });\n        informationElement.informationElements.forEach(ie => {\n            data.nodes.push({\n                id: ie.id,\n                label: ie.label,\n                name: ie.name,\n                group: ie.type,\n                weight: ie.weight\n            });\n        });\n        relationship.relations\n            .map(relation => {\n                return {\n                    id: relation.id,\n                    type: relation.type,\n                    stakeholder: stakeholder.stakeholders.find(s => {\n                        return s.id === relation.stakeholder;\n                    }),\n                    information_element: informationElement.informationElements.find(\n                        ie_ => {\n                            return ie_.id === relation.information_element;\n                        }\n                    )\n                };\n            })\n            .forEach(relation => {\n                data.links.push({\n                    source: [\"production\"].includes(relation.type)\n                        ? relation.stakeholder.label\n                        : relation.information_element.label,\n                    target: [\"production\"].includes(relation.type)\n                        ? relation.information_element.label\n                        : relation.stakeholder.label,\n                    type: relation.type\n                });\n            });\n        informationElement.informationElements.forEach(ie => {\n            if (ie.information_elements.length !== 0) {\n                ie.information_elements.forEach(ie_ => {\n                    data.links.push({\n                        source: informationElement.informationElements.find(\n                            ie__ => {\n                                return ie__.id === ie_;\n                            }\n                        ).label,\n                        target: ie.label,\n                        type: \"uses\"\n                    });\n                });\n            }\n        });\n        setJsonData(data);\n        return data;\n    };\n\n    useEffect(() => {\n        if (\n            !stakeholder.loading &&\n            !informationElement.loading &&\n            !relationship.loading\n        ) {\n            const data = getVizData();\n            drawViz(data);\n        }\n\n        return () => {\n            const svg = select(svgRef.current);\n            svg.selectAll(\"*\").remove();\n        };\n    }, [\n        stakeholder.stakeholders,\n        informationElement.informationElements,\n        relationship.relations,\n        config\n    ]);\n\n    return <svg style={{ marginTop: \"-40px\" }} ref={svgRef}></svg>;\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    relationship: state.relationship,\n    jsonData: state.viz.jsonData,\n    root: state.viz.root,\n    config: state.config\n});\n\nexport default connect(mapSateToProps, { setJsonData })(Visualization);\n","/code/src/redux/types.js",[],"/code/src/components/layouts/Modal/index.js",[],"/code/src/components/forms/StakeholderForm/index.js",[],"/code/src/components/layouts/Detail/index.js",[],"/code/src/components/forms/ApplicationForm/index.js",[],"/code/src/components/layouts/Tag/index.js",[],"/code/src/components/layouts/Control/index.js",[],"/code/src/components/layouts/Card/index.js",[],"/code/src/components/layouts/Header/index.js",[],"/code/src/redux/actions/vizActions.js",[],"/code/src/utils/environment.js",[],"/code/src/utils/app.utils.js",[],"/code/src/components/forms/StakeholderForm/StakeholderForm.jsx",["322"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_stakeholderform.scss\";\n\nimport { toggleModal } from \"../../../redux/actions/modalActions\";\nimport { createStakeholder } from \"../../../redux/actions/stakeholderActions\";\n\nconst StakeholderForm = ({ application, toggleModal, createStakeholder }) => {\n    const [name, setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [weight, setWeight] = useState(1);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        createStakeholder({\n            name,\n            description,\n            weight,\n            application: application.id\n        });\n        toggleModal();\n    };\n    return (\n        <form className=\"form-modal\" onSubmit={handleSubmit}>\n            <h3>New stakeholder</h3>\n            <div className=\"form-group\">\n                <span className=\"form-label-req\">Name*</span>\n                <input\n                    type=\"text\"\n                    placeholder=\"ex. Customers\"\n                    className=\"form-control\"\n                    value={name}\n                    onChange={e => {\n                        setName(e.target.value);\n                    }}\n                />\n            </div>\n            <div className=\"form-group\">\n                <span className=\"form-label\">Description</span>\n                <textarea\n                    cols=\"30\"\n                    rows=\"4\"\n                    placeholder=\"Add a brief description about the stakeholder here...\"\n                    className=\"form-control\"\n                    value={description}\n                    onChange={e => {\n                        setDescription(e.target.value);\n                    }}\n                />\n            </div>\n            <div className=\"form-group\">\n                <span className=\"form-label\">Weight</span>\n                <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"1\"\n                    value=\"1\"\n                    className=\"form-control\"\n                    value={weight}\n                    onChange={e => {\n                        setWeight(e.target.value);\n                    }}\n                />\n            </div>\n            <button type=\"submit\" className=\"form-submit\">\n                Add\n            </button>\n        </form>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application.application\n});\n\nexport default connect(mapSateToProps, { toggleModal, createStakeholder })(\n    StakeholderForm\n);\n","/code/src/components/layouts/Control/Control.jsx",["323"],"import { React, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Skeleton from \"react-loading-skeleton\";\n\nimport \"./_control.scss\";\n\nimport Tag from \"../Tag\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faChevronDown,\n    faChevronUp,\n    faSpinner\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport Slider from \"../Slider\";\n\nimport {\n    updateConfig,\n    resetConfig\n} from \"../../../redux/actions/configActions\";\n\nconst Control = ({\n    application,\n    stakeholder,\n    informationElement,\n    help,\n    config,\n\n    updateConfig,\n    resetConfig\n}) => {\n    let [isOpen, setIsOpen] = useState(false);\n\n    const handleToggle = () => {\n        setIsOpen(!isOpen);\n    };\n\n    if (application.loading) {\n        return (\n            <div className=\"control control-collapsed\">\n                <FontAwesomeIcon\n                    className=\"spinner\"\n                    icon={faSpinner}\n                    size=\"lg\"\n                />\n            </div>\n        );\n    }\n\n    const handleSliderChange = (event, metric) => {\n        updateConfig({ [metric]: event.target.value });\n    };\n\n    const handleRadioClick = (event, mode) => {\n        updateConfig({ textMode: mode });\n    };\n    return (\n        <>\n            <div className={\"control \" + (isOpen ? \"\" : \"control-collapsed\")}>\n                <div className=\"control__header\">\n                    <div className=\"control__left\">\n                        {application.loading ? (\n                            <h2>{application.application?.name}</h2>\n                        ) : (\n                            <h2>{application.application?.name}</h2>\n                        )}\n                    </div>\n                    <div className=\"control__right\">\n                        {/* <FontAwesomeIcon\n                            icon={faInfo}\n                            fixedWidth\n                            size=\"sm\"\n                        />\n                        <a href=\"\">read transparency note</a> */}\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Stakeholders\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Stakeholders</b> are the people\n                                            that use the service or the\n                                            software, departements,\n                                            organisations, etc., which are\n                                            involved in the information exchange\n                                            process, providing, receiving, or\n                                            requesting transparency. We can\n                                            group stakeholders by one entity,\n                                            for example User or IT Department.\n                                            However, the exchanged information\n                                            within an information exchange\n                                            system may concern all stakeholders\n                                            within that system, or it may\n                                            concern the public audience.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    stakeholder.stakeholders &&\n                                    stakeholder.stakeholders.length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Policy\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Policy transparency</b> every\n                                            question whose answer provides\n                                            goals, intentions, policies and\n                                            decision making is a policy\n                                            transparency question. “Why?” is the\n                                            main question here, i.e., why\n                                            certain action is performed or for\n                                            what reason this action is performed\n                                            in the context of transparency. For\n                                            example, in a hosting service\n                                            platform, policy transparency\n                                            reveals why encryption is needed in\n                                            servers, or why I have a limited\n                                            storage capacity.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"policy\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Process\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Process transparency</b> every\n                                            question whose answer provides\n                                            procedures, processes, behaviours\n                                            and interactions is a process\n                                            transparency question. “How?” is the\n                                            main question here, i.e., how\n                                            something is performed or done in\n                                            the context of transparency. For\n                                            example in a hosting service\n                                            platform, process transparency\n                                            reveals how data is encrypted in the\n                                            servers, and how servers are immune\n                                            from cyber attacks.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"process\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Data\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Data transparency</b> every\n                                            question whose answer provides data,\n                                            content or information is a data\n                                            transparency question. “What? When?\n                                            Where? Who?” These questions\n                                            primarily answer what information is\n                                            needed and who are the stakeholders\n                                            in the context of transparency. For\n                                            example, in a hosting service\n                                            platform, data transparency reveals\n                                            the server's performances to the\n                                            client for each plan, and the price\n                                            of each plan.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"data\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"control__bottom\">\n                    <div\n                        className={\n                            \"control__pannel\" +\n                            (isOpen ? \"\" : \" control__pannel-callapsed\")\n                        }\n                    >\n                        {/* <p>✏️ Control here ...</p> */}\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Tension</span>\n                                <span className=\"control__value\">\n                                    {config.tension}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={1}\n                                value={config.tension}\n                                step={0.05}\n                                onChange={event => {\n                                    handleSliderChange(event, \"tension\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Radius</span>\n                                <span className=\"control__value\">\n                                    {config.radius}\n                                </span>\n                            </div>\n                            <Slider\n                                min={100}\n                                max={400}\n                                value={config.radius}\n                                step={10}\n                                onChange={event => {\n                                    handleSliderChange(event, \"radius\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Extent</span>\n                                <span className=\"control__value\">\n                                    {config.extent}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={360}\n                                value={config.extent}\n                                step={10}\n                                onChange={event => {\n                                    handleSliderChange(event, \"extent\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">Rotate</span>\n                                <span className=\"control__value\">\n                                    {config.rotate}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={360}\n                                value={config.rotate}\n                                step={10}\n                                onChange={event => {\n                                    handleSliderChange(event, \"rotate\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">\n                                    Text size\n                                </span>\n                                <span className=\"control__value\">\n                                    {config.textSize}\n                                </span>\n                            </div>\n                            <Slider\n                                min={10}\n                                max={20}\n                                value={config.textSize}\n                                step={1}\n                                onChange={event => {\n                                    handleSliderChange(event, \"textSize\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">\n                                    Text offset\n                                </span>\n                                <span className=\"control__value\">\n                                    {config.textOffset}\n                                </span>\n                            </div>\n                            <Slider\n                                min={0}\n                                max={3}\n                                value={config.textOffset}\n                                step={0.25}\n                                onChange={event => {\n                                    handleSliderChange(event, \"textOffset\");\n                                }}\n                            />\n                        </div>\n                        <div className=\"control__container-last\">\n                            <div className=\"control__head\">\n                                <span className=\"control__label\">\n                                    Text mode\n                                </span>\n                                <br />\n                            </div>\n                            <div className=\"control__radio_container\">\n                                <div className=\"control_radio\">\n                                    <div\n                                        className={\n                                            config.textMode === \"name\"\n                                                ? \"radio-clicked\"\n                                                : \"radio\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"name\");\n                                        }}\n                                    ></div>\n                                    <span\n                                        className={\n                                            config.textMode === \"name\"\n                                                ? \"radio-span-clicked\"\n                                                : \"\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"name\");\n                                        }}\n                                    >\n                                        Name\n                                    </span>\n                                </div>\n                                <div className=\"control_radio\">\n                                    <div\n                                        className={\n                                            config.textMode === \"label\"\n                                                ? \"radio-clicked\"\n                                                : \"radio\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"label\");\n                                        }}\n                                    ></div>\n                                    <span\n                                        className={\n                                            config.textMode === \"label\"\n                                                ? \"radio-span-clicked\"\n                                                : \"\"\n                                        }\n                                        onClick={event => {\n                                            handleRadioClick(event, \"label\");\n                                        }}\n                                    >\n                                        Label\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"control__container-last\">\n                            <span\n                                className=\"control__button\"\n                                onClick={() => {\n                                    resetConfig();\n                                }}\n                            >\n                                Reset\n                            </span>\n                        </div>\n                    </div>\n\n                    <div\n                        className=\"control__toggle\"\n                        onClick={handleToggle}\n                        title=\"Toggle menu\"\n                    >\n                        <FontAwesomeIcon icon={faChevronUp} size=\"sm\" />\n                        <FontAwesomeIcon icon={faChevronDown} size=\"sm\" />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    help: state.help.help,\n    config: state.config\n});\n\nexport default connect(mapSateToProps, { updateConfig, resetConfig })(Control);\n","/code/src/components/forms/ApplicationForm/ApplicationForm.jsx",[],"/code/src/components/layouts/Modal/Modal.jsx",["324"],"import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_modal.scss\";\nimport { toggleModal } from \"../../../redux/actions/modalActions\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Modal = ({ opened, toggleModal, children }) => {\n    const handleOutsideClick = event => {\n        // event.preventDefault();\n        if (event.target === event.currentTarget) {\n            toggleModal();\n        }\n    };\n    return (\n        <div\n            className={`modal${opened ? \"\" : \"-hidden\"}`}\n            onClick={handleOutsideClick}\n        >\n            <div className=\"modal__menu\">\n                <div className=\"modal__content\">\n                    <div className=\"modal__exit\">\n                        <FontAwesomeIcon\n                            onClick={() => {\n                                toggleModal();\n                            }}\n                            icon={faTimes}\n                            size=\"x1\"\n                            onClick={e => {\n                                toggleModal();\n                            }}\n                        />\n                    </div>\n\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    opened: state.modal.opened\n});\n\nexport default connect(mapStateToProps, { toggleModal })(Modal);\n","/code/src/components/layouts/Tag/Tag.jsx",[],"/code/src/components/layouts/Card/Card.jsx",[],"/code/src/components/layouts/Detail/Detail.jsx",[],"/code/src/components/layouts/Header/Header.jsx",[],"/code/src/redux/actions/configActions.js",[],"/code/src/components/layouts/Stakeholder/index.js",[],"/code/src/components/layouts/Slider/index.js",[],"/code/src/components/layouts/InformationElement/index.js",[],"/code/src/components/layouts/Dropdown/index.js",[],"/code/src/components/layouts/Stakeholder/Stakeholder.jsx",[],"/code/src/components/layouts/InformationElement/InformationElement.jsx",[],"/code/src/components/layouts/Slider/Slider.jsx",[],"/code/src/components/layouts/Dropdown/Dropdown.jsx",["325"],"import { React, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./_dropdown.scss\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faCaretDown,\n    faInfoCircle,\n    faCog,\n    faSignOutAlt,\n    faLayerGroup\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { toggleHelp } from \"../../../redux/actions/helpActions\";\nimport { handleTipPosition } from \"../../../utils/app.utils\";\n\nconst Dropdown = ({ help, toggleHelp }) => {\n    const refDropdown = useRef(null);\n\n    const toggleDropdown = event => {\n        if (refDropdown.current?.open) {\n            if (event !== undefined) {\n                event.preventDefault();\n            }\n            refDropdown.current.open = false;\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"click\", () => {\n            toggleDropdown();\n        });\n    }, []);\n\n    const startHelp = e => {\n        toggleHelp();\n        document.querySelectorAll(\"[data-tip]\").forEach(element => {\n            element.removeEventListener(\"mouseenter\", handleTipPosition);\n            element.addEventListener(\"mouseenter\", handleTipPosition);\n        });\n    };\n\n    return (\n        <details className=\"dropdown\" ref={refDropdown}>\n            <summary className=\"dropdown__toggle\" onClick={toggleDropdown}>\n                <FontAwesomeIcon icon={faCog} fixedWidth />\n                <FontAwesomeIcon icon={faCaretDown} fixedWidth size=\"sm\" />\n            </summary>\n            <div className=\"dropdown__menu\">\n                <Link className=\"dropdown__item\" to=\"/dashboard\">\n                    <FontAwesomeIcon icon={faLayerGroup} fixedWidth size=\"x1\" />\n                    <span>Your applications</span>\n                </Link>\n                <div className=\"dropdown__devider\"></div>\n                <div className=\"dropdown__item\" onClick={e => startHelp(e)}>\n                    <FontAwesomeIcon icon={faInfoCircle} fixedWidth size=\"x1\" />\n                    <a href=\"#\" to=\"/\">\n                        Help\n                    </a>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faCog} fixedWidth size=\"x1\" />\n                    <Link to=\"/\">Settings</Link>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faSignOutAlt} fixedWidth size=\"x1\" />\n                    <Link to=\"/\">Sign out</Link>\n                </div>\n            </div>\n        </details>\n    );\n};\n\nconst mapSateToProps = state => ({\n    help: state.help.help\n});\n\nexport default connect(mapSateToProps, {\n    toggleHelp\n})(Dropdown);\n",["326","327"],"/code/src/components/layouts/ModalMenu/index.js",[],"/code/src/components/layouts/ModalMenu/ModalMenu.jsx",[],"/code/src/redux/actions/index.js",[],"/code/src/redux/actions/authActions.js",[],{"ruleId":"328","replacedBy":"329"},{"ruleId":"330","replacedBy":"331"},{"ruleId":"332","severity":1,"message":"333","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":17},{"ruleId":"336","severity":1,"message":"337","line":79,"column":25,"nodeType":"338","endLine":79,"endColumn":37},{"ruleId":"336","severity":1,"message":"337","line":95,"column":25,"nodeType":"338","endLine":95,"endColumn":37},{"ruleId":"332","severity":1,"message":"339","line":6,"column":8,"nodeType":"334","messageId":"335","endLine":6,"endColumn":12},{"ruleId":"340","severity":1,"message":"341","line":34,"column":8,"nodeType":"342","endLine":34,"endColumn":10,"suggestions":"343"},{"ruleId":"332","severity":1,"message":"344","line":3,"column":8,"nodeType":"334","messageId":"335","endLine":3,"endColumn":16},{"ruleId":"332","severity":1,"message":"345","line":34,"column":5,"nodeType":"334","messageId":"335","endLine":34,"endColumn":11},{"ruleId":"332","severity":1,"message":"346","line":35,"column":5,"nodeType":"334","messageId":"335","endLine":35,"endColumn":10},{"ruleId":"332","severity":1,"message":"347","line":36,"column":5,"nodeType":"334","messageId":"335","endLine":36,"endColumn":12},{"ruleId":"348","severity":1,"message":"349","line":9,"column":1,"nodeType":"350","endLine":22,"endColumn":3},{"ruleId":"348","severity":1,"message":"349","line":16,"column":1,"nodeType":"350","endLine":50,"endColumn":3},{"ruleId":"332","severity":1,"message":"351","line":3,"column":10,"nodeType":"334","messageId":"335","endLine":3,"endColumn":20},{"ruleId":"332","severity":1,"message":"352","line":3,"column":22,"nodeType":"334","messageId":"335","endLine":3,"endColumn":35},{"ruleId":"332","severity":1,"message":"353","line":10,"column":5,"nodeType":"334","messageId":"335","endLine":10,"endColumn":21},{"ruleId":"332","severity":1,"message":"354","line":11,"column":5,"nodeType":"334","messageId":"335","endLine":11,"endColumn":14},{"ruleId":"332","severity":1,"message":"355","line":12,"column":5,"nodeType":"334","messageId":"335","endLine":12,"endColumn":17},{"ruleId":"332","severity":1,"message":"356","line":13,"column":5,"nodeType":"334","messageId":"335","endLine":13,"endColumn":16},{"ruleId":"357","severity":1,"message":"358","line":26,"column":9,"nodeType":"359","messageId":"360","endLine":26,"endColumn":13},{"ruleId":"357","severity":1,"message":"358","line":34,"column":13,"nodeType":"359","messageId":"360","endLine":34,"endColumn":17},{"ruleId":"357","severity":1,"message":"358","line":49,"column":13,"nodeType":"359","messageId":"360","endLine":49,"endColumn":17},{"ruleId":"332","severity":1,"message":"361","line":436,"column":11,"nodeType":"334","messageId":"335","endLine":436,"endColumn":18},{"ruleId":"357","severity":1,"message":"358","line":444,"column":13,"nodeType":"359","messageId":"360","endLine":444,"endColumn":17},{"ruleId":"332","severity":1,"message":"362","line":451,"column":11,"nodeType":"334","messageId":"335","endLine":451,"endColumn":15},{"ruleId":"332","severity":1,"message":"363","line":488,"column":11,"nodeType":"334","messageId":"335","endLine":488,"endColumn":15},{"ruleId":"332","severity":1,"message":"364","line":501,"column":11,"nodeType":"334","messageId":"335","endLine":501,"endColumn":17},{"ruleId":"357","severity":1,"message":"358","line":518,"column":13,"nodeType":"359","messageId":"360","endLine":518,"endColumn":17},{"ruleId":"332","severity":1,"message":"365","line":14,"column":10,"nodeType":"334","messageId":"335","endLine":14,"endColumn":21},{"ruleId":"366","severity":1,"message":"367","line":80,"column":21,"nodeType":"368","endLine":80,"endColumn":35},{"ruleId":"340","severity":1,"message":"369","line":106,"column":39,"nodeType":"334","endLine":106,"endColumn":46},{"ruleId":"340","severity":1,"message":"370","line":109,"column":8,"nodeType":"342","endLine":114,"endColumn":6,"suggestions":"371"},{"ruleId":"366","severity":1,"message":"367","line":60,"column":21,"nodeType":"368","endLine":60,"endColumn":35},{"ruleId":"332","severity":1,"message":"344","line":3,"column":8,"nodeType":"334","messageId":"335","endLine":3,"endColumn":16},{"ruleId":"366","severity":1,"message":"367","line":30,"column":29,"nodeType":"368","endLine":32,"endColumn":31},{"ruleId":"336","severity":1,"message":"337","line":59,"column":21,"nodeType":"338","endLine":59,"endColumn":40},{"ruleId":"328","replacedBy":"372"},{"ruleId":"330","replacedBy":"373"},"no-native-reassign",["374"],"no-negated-in-lhs",["375"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'logo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getApplications'. Either include it or remove the dependency array. If 'getApplications' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["376"],"'Skeleton' is defined but never used.","'overed' is defined but never used.","'outed' is defined but never used.","'clicked' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setFocused' is defined but never used.","'removeFocused' is defined but never used.","'colorStakeholder' is assigned a value but never used.","'colorData' is assigned a value but never used.","'colorProcess' is assigned a value but never used.","'colorPolicy' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'arcDraw' is assigned a value but never used.","'node' is assigned a value but never used.","'link' is assigned a value but never used.","'circle' is assigned a value but never used.","'toggleModal' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","The ref value 'svgRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'svgRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'getVizData', 'informationElement.loading', 'relationship.loading', and 'stakeholder.loading'. Either include them or remove the dependency array.",["377"],["374"],["375"],"no-global-assign","no-unsafe-negation",{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},"Update the dependencies array to be: [getApplications]",{"range":"382","text":"383"},"Update the dependencies array to be: [stakeholder.stakeholders, informationElement.informationElements, relationship.relations, config, stakeholder.loading, informationElement.loading, relationship.loading, getVizData]",{"range":"384","text":"385"},[1145,1147],"[getApplications]",[3438,3574],"[stakeholder.stakeholders, informationElement.informationElements, relationship.relations, config, stakeholder.loading, informationElement.loading, relationship.loading, getVizData]"]