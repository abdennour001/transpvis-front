[{"/code/src/index.js":"1","/code/src/reportWebVitals.js":"2","/code/src/components/App.js":"3","/code/src/redux/store.js":"4","/code/src/redux/reducers/index.js":"5","/code/src/components/pages/Splash/index.js":"6","/code/src/components/pages/Splash/Splash.jsx":"7","/code/src/components/pages/Home/index.js":"8","/code/src/components/pages/Home/Home.jsx":"9","/code/src/components/pages/index.js":"10","/code/src/components/layouts/Header/index.js":"11","/code/src/components/layouts/Header/Header.jsx":"12","/code/src/components/layouts/index.js":"13","/code/src/components/layouts/Dropdown/index.js":"14","/code/src/components/layouts/Dropdown/Dropdown.jsx":"15","/code/src/components/layouts/Card/index.js":"16","/code/src/components/layouts/Card/Card.jsx":"17","/code/src/components/layouts/Tag/index.js":"18","/code/src/components/layouts/Tag/Tag.jsx":"19","/code/src/components/layouts/Control/index.js":"20","/code/src/components/layouts/Control/Control.jsx":"21","/code/src/components/layouts/Detail/index.js":"22","/code/src/components/layouts/Detail/Detail.jsx":"23","/code/src/components/layouts/Stakeholder/index.js":"24","/code/src/components/layouts/Stakeholder/Stakeholder.jsx":"25","/code/src/components/layouts/InformationElement/index.js":"26","/code/src/components/layouts/InformationElement/InformationElement.jsx":"27","/code/src/redux/reducers/informationElementReducer.js":"28","/code/src/redux/reducers/relationshipReducer.js":"29","/code/src/redux/reducers/applicationReducer.js":"30","/code/src/redux/reducers/stakeholderReducer.js":"31","/code/src/redux/actions/stakeholderActions.js":"32","/code/src/redux/types.js":"33","/code/src/utils/environment.js":"34","/code/src/redux/actions/informationElementsActions.js":"35","/code/src/redux/actions/relationsActions.js":"36","/code/src/redux/actions/applicationActions.js":"37","/code/src/utils/colors.js":"38","/code/src/components/layouts/Visualization/Visualization.jsx":"39","/code/src/utils/d3.js":"40","/code/src/redux/reducers/helpReducer.js":"41","/code/src/redux/actions/helpActions.js":"42"},{"size":540,"mtime":1616859885444,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1607786260395,"results":"45","hashOfConfig":"44"},{"size":523,"mtime":1615047385272,"results":"46","hashOfConfig":"44"},{"size":391,"mtime":1614975704084,"results":"47","hashOfConfig":"44"},{"size":543,"mtime":1619910291781,"results":"48","hashOfConfig":"44"},{"size":55,"mtime":1615040244811,"results":"49","hashOfConfig":"44"},{"size":442,"mtime":1615040648480,"results":"50","hashOfConfig":"44"},{"size":49,"mtime":1615043371606,"results":"51","hashOfConfig":"44"},{"size":23037,"mtime":1619931194032,"results":"52","hashOfConfig":"44"},{"size":0,"mtime":1614987955111,"results":"53","hashOfConfig":"44"},{"size":55,"mtime":1615043553473,"results":"54","hashOfConfig":"44"},{"size":724,"mtime":1615063282606,"results":"55","hashOfConfig":"44"},{"size":0,"mtime":1614975704078,"results":"56","hashOfConfig":"44"},{"size":61,"mtime":1615063152748,"results":"57","hashOfConfig":"44"},{"size":2366,"mtime":1619917238997,"results":"58","hashOfConfig":"44"},{"size":49,"mtime":1615071417859,"results":"59","hashOfConfig":"44"},{"size":1835,"mtime":1617799853284,"results":"60","hashOfConfig":"44"},{"size":46,"mtime":1615078643059,"results":"61","hashOfConfig":"44"},{"size":528,"mtime":1617799853286,"results":"62","hashOfConfig":"44"},{"size":58,"mtime":1615219058338,"results":"63","hashOfConfig":"44"},{"size":10735,"mtime":1619928965179,"results":"64","hashOfConfig":"44"},{"size":55,"mtime":1615225040581,"results":"65","hashOfConfig":"44"},{"size":1534,"mtime":1617799853285,"results":"66","hashOfConfig":"44"},{"size":70,"mtime":1616859885441,"results":"67","hashOfConfig":"44"},{"size":25045,"mtime":1619926580943,"results":"68","hashOfConfig":"44"},{"size":91,"mtime":1616859885439,"results":"69","hashOfConfig":"44"},{"size":24357,"mtime":1619928289092,"results":"70","hashOfConfig":"44"},{"size":661,"mtime":1617799853290,"results":"71","hashOfConfig":"44"},{"size":517,"mtime":1617799853290,"results":"72","hashOfConfig":"44"},{"size":1017,"mtime":1617799853289,"results":"73","hashOfConfig":"44"},{"size":533,"mtime":1617799853290,"results":"74","hashOfConfig":"44"},{"size":709,"mtime":1617799853289,"results":"75","hashOfConfig":"44"},{"size":710,"mtime":1619910316894,"results":"76","hashOfConfig":"44"},{"size":163,"mtime":1616859894226,"results":"77","hashOfConfig":"44"},{"size":788,"mtime":1617799853289,"results":"78","hashOfConfig":"44"},{"size":750,"mtime":1617799853289,"results":"79","hashOfConfig":"44"},{"size":1210,"mtime":1617799853288,"results":"80","hashOfConfig":"44"},{"size":122,"mtime":1617799853291,"results":"81","hashOfConfig":"44"},{"size":3807,"mtime":1619744343690,"results":"82","hashOfConfig":"44"},{"size":8367,"mtime":1619744578658,"results":"83","hashOfConfig":"44"},{"size":330,"mtime":1619910270791,"results":"84","hashOfConfig":"44"},{"size":385,"mtime":1619930080075,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"a83vg7",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/code/src/index.js",[],["177","178"],"/code/src/reportWebVitals.js",[],"/code/src/components/App.js",[],"/code/src/redux/store.js",[],"/code/src/redux/reducers/index.js",[],"/code/src/components/pages/Splash/index.js",[],["179","180"],"/code/src/components/pages/Splash/Splash.jsx",[],"/code/src/components/pages/Home/index.js",[],"/code/src/components/pages/Home/Home.jsx",["181","182"],"/code/src/components/pages/index.js",[],"/code/src/components/layouts/Header/index.js",[],"/code/src/components/layouts/Header/Header.jsx",[],"/code/src/components/layouts/index.js",[],["183","184"],"/code/src/components/layouts/Dropdown/index.js",[],"/code/src/components/layouts/Dropdown/Dropdown.jsx",["185"],"import { React, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./_dropdown.scss\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faCaretDown,\n    faInfoCircle,\n    faCog,\n    faSignOutAlt,\n    faLayerGroup\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { toggleHelp } from \"../../../redux/actions/helpActions\";\n\nconst Dropdown = ({help, toggleHelp}) => {\n    const refDropdown = useRef(null);\n\n    const toggleDropdown = event => {\n        if (refDropdown.current?.open) {\n            if (event !== undefined) {\n                event.preventDefault();\n            }\n            refDropdown.current.open = false;\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"click\", () => {\n            toggleDropdown();\n        });\n    }, []);\n\n    const startHelp = (e) => {\n        toggleHelp();\n    }\n\n    return (\n        <details className=\"dropdown\" ref={refDropdown}>\n            <summary className=\"dropdown__toggle\" onClick={toggleDropdown}>\n                <FontAwesomeIcon icon={faCog} fixedWidth />\n                <FontAwesomeIcon icon={faCaretDown} fixedWidth size=\"sm\" />\n            </summary>\n            <div className=\"dropdown__menu\">\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faLayerGroup} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Your applications</Link>\n                </div>\n                <div className=\"dropdown__devider\"></div>\n                <div className=\"dropdown__item\" onClick={(e) => startHelp(e)}>\n                    <FontAwesomeIcon icon={faInfoCircle} fixedWidth size=\"md\" />\n                    <a href=\"#\" to=\"/\">Help</a>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faCog} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Settings</Link>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faSignOutAlt} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Sign out</Link>\n                </div>\n            </div>\n        </details>\n    );\n};\n\n\nconst mapSateToProps = state => ({\n    help: state.help.help,\n});\n\nexport default connect(mapSateToProps, {\n    toggleHelp\n})(Dropdown);\n","/code/src/components/layouts/Card/index.js",[],"/code/src/components/layouts/Card/Card.jsx",[],"/code/src/components/layouts/Tag/index.js",[],"/code/src/components/layouts/Tag/Tag.jsx",[],"/code/src/components/layouts/Control/index.js",[],"/code/src/components/layouts/Control/Control.jsx",["186"],"import { React, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Skeleton from \"react-loading-skeleton\";\n\nimport \"./_control.scss\";\n\nimport Tag from \"../Tag\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faChevronDown,\n    faChevronUp,\n    faSpinner\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Control = ({ application, stakeholder, informationElement, help }) => {\n    let [isOpen, setIsOpen] = useState(false);\n\n    const handleToggle = () => {\n        setIsOpen(!isOpen);\n    };\n\n    if (application.loading) {\n        return (\n            <div className=\"control control-collapsed\">\n                <FontAwesomeIcon\n                    className=\"spinner\"\n                    icon={faSpinner}\n                    size=\"lg\"\n                />\n            </div>\n        );\n    }\n\n    return (\n        <>\n            <div className={\"control \" + (isOpen ? \"\" : \"control-collapsed\")}>\n                <div className=\"control__header\">\n                    <div className=\"control__left\">\n                        {application.loading ? (\n                            <h2>{application.application?.name}</h2>\n                        ) : (\n                            <h2>{application.application?.name}</h2>\n                        )}\n                    </div>\n                    <div className=\"control__right\">\n                        {/* <FontAwesomeIcon\n                            icon={faInfo}\n                            fixedWidth\n                            size=\"sm\"\n                        />\n                        <a href=\"\">read transparency note</a> */}\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                            >\n                                Stakeholders\n                                {help && (\n                                    <span className=\"help__text\">\n                                        <b>Stakeholders</b> are the people that\n                                        use the service or the software,\n                                        departements, organisations, etc., which\n                                        are involved in the information exchange\n                                        process, providing, receiving, or\n                                        requesting transparency. We can group\n                                        stakeholders by one entity, for example\n                                        User or IT Department. However, the\n                                        exchanged information within an\n                                        information exchange system may concern\n                                        all stakeholders within that system, or\n                                        it may concern the public audience.\n                                    </span>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    stakeholder.stakeholders &&\n                                    stakeholder.stakeholders.length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                            >\n                                Policy\n                                {help && (\n                                    <span className=\"help__text\">\n                                        <b>Policy transparency</b> every\n                                        question whose answer provides goals,\n                                        intentions, policies and decision making\n                                        is a policy transparency question.\n                                        “Why?” is the main question here, i.e.,\n                                        why certain action is performed or for\n                                        what reason this action is performed in\n                                        the context of transparency. For\n                                        example, in a hosting service platform,\n                                        policy transparency reveals why\n                                        encryption is needed in servers, or why\n                                        I have a limited storage capacity.\n                                    </span>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"policy\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                            >\n                                Process\n                                {help && (\n                                    <span className=\"help__text\">\n                                        <b>Process transparency</b> every\n                                        question whose answer provides\n                                        procedures, processes, behaviours and\n                                        interactions is a process transparency\n                                        question. “How?” is the main question\n                                        here, i.e., how something is performed\n                                        or done in the context of transparency.\n                                        For example in a hosting service\n                                        platform, process transparency reveals\n                                        how data is encrypted in the servers,\n                                        and how servers are immune from cyber\n                                        attacks.\n                                    </span>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"process\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                            >\n                                Data\n                                {help && (\n                                    <span className=\"help__text\">\n                                        <b>Data transparency</b> every question\n                                        whose answer provides data, content or\n                                        information is a data transparency\n                                        question. “What? When? Where? Who?”\n                                        These questions primarily answer what\n                                        information is needed and who are the\n                                        stakeholders in the context of\n                                        transparency. For example, in a hosting\n                                        service platform, data transparency\n                                        reveals the server's performances to the\n                                        client for each plan, and the price of\n                                        each plan.\n                                    </span>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"data\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"control__bottom\">\n                    <div\n                        className={\n                            \"control__pannel\" +\n                            (isOpen ? \"\" : \" control__pannel-callapsed\")\n                        }\n                    >\n                        <p>✏️ Control here ...</p>\n                    </div>\n\n                    <div\n                        className=\"control__toggle\"\n                        onClick={handleToggle}\n                        title=\"Toggle menu\"\n                    >\n                        <FontAwesomeIcon icon={faChevronUp} size=\"sm\" />\n                        <FontAwesomeIcon icon={faChevronDown} size=\"sm\" />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    help: state.help.help\n});\n\nexport default connect(mapSateToProps)(Control);\n","/code/src/components/layouts/Detail/index.js",[],"/code/src/components/layouts/Detail/Detail.jsx",[],"/code/src/components/layouts/Stakeholder/index.js",[],"/code/src/components/layouts/Stakeholder/Stakeholder.jsx",[],"/code/src/components/layouts/InformationElement/index.js",[],"/code/src/components/layouts/InformationElement/InformationElement.jsx",[],"/code/src/redux/reducers/informationElementReducer.js",[],"/code/src/redux/reducers/relationshipReducer.js",[],"/code/src/redux/reducers/applicationReducer.js",[],"/code/src/redux/reducers/stakeholderReducer.js",[],"/code/src/redux/actions/stakeholderActions.js",[],"/code/src/redux/types.js",[],"/code/src/utils/environment.js",[],"/code/src/redux/actions/informationElementsActions.js",[],"/code/src/redux/actions/relationsActions.js",[],"/code/src/redux/actions/applicationActions.js",[],"/code/src/utils/colors.js",[],"/code/src/components/layouts/Visualization/Visualization.jsx",["187","188"],"import React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_visualization.scss\";\nimport { chart } from \"../../../utils/d3\";\n\nimport { select } from \"d3\";\nexport const d3 = require(\"d3\");\n\nconst Visualization = ({\n    application,\n    stakeholder,\n    informationElement,\n    relationship\n}) => {\n    const svgRef = useRef(null);\n\n    const drawViz = ({ nodes, links }) => {\n        const svg = select(svgRef.current);\n\n        chart(svg, { nodes, links });\n    };\n\n    const getVizData = () => {\n        let data = {};\n        data.nodes = [];\n        data.links = [];\n        stakeholder.stakeholders.forEach(stakeholder => {\n            data.nodes.push({\n                id: stakeholder.id,\n                label: stakeholder.label,\n                name: stakeholder.name,\n                group: \"stakeholder\",\n                weight: stakeholder.weight\n            });\n        });\n        informationElement.informationElements.forEach(ie => {\n            data.nodes.push({\n                id: ie.id,\n                label: ie.label,\n                name: ie.name,\n                group: ie.type,\n                weight: ie.weight\n            });\n        });\n        relationship.relations\n            .map(relation => {\n                return {\n                    id: relation.id,\n                    type: relation.type,\n                    stakeholder: stakeholder.stakeholders.find(s => {\n                        return s.id === relation.stakeholder;\n                    }),\n                    information_element: informationElement.informationElements.find(\n                        ie_ => {\n                            return ie_.id === relation.information_element;\n                        }\n                    )\n                };\n            })\n            .forEach(relation => {\n                data.links.push({\n                    source: [\"production\"].includes(relation.type)\n                        ? relation.stakeholder.label\n                        : relation.information_element.label,\n                    target: [\"production\"].includes(relation.type)\n                        ? relation.information_element.label\n                        : relation.stakeholder.label,\n                    type: relation.type\n                });\n            });\n        informationElement.informationElements.forEach(ie => {\n            if (ie.information_elements.length !== 0) {\n                ie.information_elements.forEach(ie_ => {\n                    data.links.push({\n                        source: informationElement.informationElements.find(\n                            ie__ => {\n                                return ie__.id === ie_;\n                            }\n                        ).label,\n                        target: ie.label,\n                        type: \"uses\"\n                    });\n                });\n            }\n        });\n        return data;\n    };\n\n    useEffect(() => {\n        if (\n            stakeholder.stakeholders &&\n            informationElement.informationElements &&\n            relationship.relations\n        ) {\n            const data = getVizData();\n            drawViz(data);\n        }\n\n        return () => {\n            const svg = select(svgRef.current);\n            svg.selectAll(\"*\").remove();\n        }\n    }, [\n        stakeholder.stakeholders,\n        informationElement.informationElements,\n        relationship.relations\n    ]);\n\n    // return <div>Hello 👋, I am a Visualization component.</div>;\n    return <svg ref={svgRef}></svg>;\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    relationship: state.relationship\n});\n\nexport default connect(mapSateToProps)(Visualization);\n","/code/src/utils/d3.js",["189","190","191","192","193","194","195","196","197","198","199"],"export const d3 = require(\"d3\");\n\nconst radius = 300\nconst tree = d3.cluster().size([2 * Math.PI, radius]);\n\nconst line = d3\n    .lineRadial()\n    .curve(d3.curveBundle.beta(0.85))\n    .radius(d => d.y)\n    .angle(d => d.x);\n\nconst width = 1100;\nconst colornone = \"#ccc\";\n\nfunction bilink(root) {\n    const map = new Map(root.leaves().map(d => [d.data.label, d]));\n\n    for (const d of root.leaves()) {\n        d.incoming = [];\n        d.outgoing = d.data.targets.map(i => [d, map.get(i)]);\n    }\n    for (const d of root.leaves()) {\n        for (const o of d.outgoing) {\n            o[1].incoming.push(o);\n        }\n    }\n    return root;\n}\n\nconst data_ = ({ nodes, links }) => {\n    const groupById = new Map();\n    const nodeById = new Map(nodes.map(node => [node.label, node]));\n\n    for (const node of nodes) {\n        let group = groupById.get(node.group);\n        if (!group) {\n            groupById.set(\n                node.group,\n                (group = { label: node.group, children: [] })\n            );\n        }\n        group.children.push(node);\n        node.targets = [];\n    }\n\n    for (const { source: sourceId, target: targetId } of links) {\n        nodeById.get(sourceId).targets.push(targetId);\n    }\n\n    return { children: [...groupById.values()] };\n};\n\nconst findStartAngle = children => {\n    var min = children[0].x;\n    children.forEach(function(d) {\n        if (d.x < min) min = d.x;\n    });\n    return min - 0.3;\n};\n\nconst findEndAngle = children => {\n    var max = children[0].x;\n    children.forEach(function(d) {\n        if (d.x > max) max = d.x;\n    });\n    return max + 0.3;\n};\n\nexport const chart = (svg, { nodes, links }) => {\n    // console.log(svg);\n    const data = data_({ nodes, links });\n    console.log(data);\n\n    var colorStakeholder = \"#4A6FA5\";\n    var colorData = \"#FFDA0A\";\n    var colorProcess = \"#61C9A8\";\n    var colorPolicy = \"#FB5012\";\n\n    const nodeById = new Map(nodes.map(node => [node.label, node]));\n\n    const root = tree(\n        bilink(\n            d3\n                .hierarchy(data)\n                .sort(\n                    (a, b) =>\n                        d3.ascending(a.height, b.height) ||\n                        d3.ascending(a.data.label, b.data.label)\n                )\n        )\n    );\n\n    // console.log(root.descendants().filter(d => d.height == 1));\n\n    // const svg = d3\n    //     .create(\"svg\")\n    //     .attr(\"viewBox\", [-width / 2, -width / 2, width, width]);\n\n    svg.attr(\"viewBox\", [-width / 2 + 30, -width / 2, width, width]);\n\n    // 🏛\n    const arcWidth = 10\n    const arc = d3\n        .arc()\n        .innerRadius(radius+6 - arcWidth)\n        .outerRadius(radius+6+ arcWidth)\n        .startAngle(d => findStartAngle(d.children))\n        .endAngle(d => findEndAngle(d.children))\n        .cornerRadius(5);\n\n    //arc drawing\n    const arcDraw = svg\n        .append(\"g\")\n        .selectAll(\"g\")\n        .data(root.descendants().filter(d => d.height === 1))\n        .join(\"g\")\n        .append(\"path\")\n        .attr(\"d\", d => arc(d))\n        // .attr(\"transform\", d => (d.endAngle <= Math.PI ? (\"rotate(-2)\") : \"rotate(4)\"))\n        .attr(\"fill\", d =>\n            eval(\n                `color${d.data.label.charAt(0).toUpperCase() +\n                    d.data.label.slice(1)}`\n            )\n        )\n        .style(\"opacity\", \".2\");\n\n    const node = svg\n        .append(\"g\")\n        .attr(\"font-size\", 16)\n        .attr(\"fill\", \"#3D4758\")\n        .selectAll(\"g\")\n        .data(root.leaves())\n        .join(\"g\")\n        .attr(\n            \"transform\",\n            d => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`\n        )\n        .append(\"text\")\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"dx\", d => (d.x >= Math.PI ? \"-1em\" : \"1em\"))\n        .attr(\"x\", d => (d.x < Math.PI ? 15 : -15))\n        .attr(\"text-anchor\", d => (d.x < Math.PI ? \"start\" : \"end\"))\n        .attr(\"transform\", d => (d.x >= Math.PI ? \"rotate(180)\" : null))\n        // .attr(\"fill\", d =>\n        //     eval(\n        //         `color${d.data.group.charAt(0).toUpperCase() +\n        //             d.data.group.slice(1)}`\n        //     )\n        // )\n        // .attr(\"fill\", colornone\n        // )\n        .style(\"cursor\", \"pointer\")\n        .text(d => nodeById.get(d.data.label).name)\n        //for eadh node,\n        .each(function(d) {\n            d.text = this;\n        })\n        //overed is the behaviour when we have a mouseover on one of the elements(nodes)\n        .on(\"mouseover\", overed)\n\n        .on(\"mouseout\", outed)\n        .call(text =>\n            text\n                .append(\"title\")\n                .text(\n                    d =>\n                        `${nodeById.get(d.data.label).name} ${\n                            d.outgoing.length\n                        } outgoing ${d.incoming.length} incoming`\n                )\n        );\n\n    //link drawing\n    const link = svg\n        .append(\"g\")\n        .attr(\"stroke\", colornone)\n        .attr(\"fill\", \"none\")\n        .selectAll(\"path\")\n        .data(root.leaves().flatMap(leaf => leaf.outgoing))\n        .join(\"path\")\n        .style(\"mix-blend-mode\", \"darken\")\n        .attr(\"d\", ([i, o]) => line(i.path(o)))\n        .each(function(d) {\n            d.path = this;\n        });\n\n    const circle = svg\n        .append(\"g\")\n        .selectAll(\"g\")\n        .data(root.leaves())\n        .join(\"g\")\n        .attr(\n            \"transform\",\n            d => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`\n        )\n\n        .append(\"circle\") // attach a circle\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"cx\", d => (d.x < Math.PI ? 6 : -6))\n        .attr(\"transform\", d => (d.x >= Math.PI ? \"rotate(180)\" : null))\n\n        .attr(\"r\", d => 8) // set the radius\n        .style(\"fill\", d =>\n            eval(\n                `color${d.data.group.charAt(0).toUpperCase() +\n                    d.data.group.slice(1)}`\n            )\n        )\n        .each(function(d) {\n            d.circle = this;\n        });\n\n    //change link style based on the event(mouseover mouseouted\n    function overed(event, d) {\n        link.style(\"mix-blend-mode\", null);\n        d3.select(this).attr(\"font-weight\", \"bold\");\n        d3.selectAll(d.incoming.map(d => d.path))\n            .data(d.incoming.map(d => d[0]))\n            .attr(\"stroke\", t =>\n                eval(\n                    `color${t.data.group.charAt(0).toUpperCase() +\n                        t.data.group.slice(1)}`\n                )\n            )\n            .attr(\"stroke-width\", 1.5)\n            .raise();\n        // d3.selectAll(d.incoming.map(([d]) => d.text)).attr(\"fill\", colorin).attr(\"font-weight\", \"bold\");\n\n        // d3.selectAll(d.incoming.map(([d]) => d.text)).data(d.incoming).attr(\"fill\", eval(`color${d.data.group.charAt(0).toUpperCase() + d.data.group.slice(1)}`)).attr(\"font-weight\", \"bold\");\n\n        // d3.selectAll(d.incoming.map(([d]) => d.circle)).style(\"fill\", colorin);\n        // d.incoming.filter(d => d.path === path)[0]\n        d3.selectAll(d.outgoing.map(d => d.path))\n            .attr(\n                \"stroke\",\n                eval(\n                    `color${d.data.group.charAt(0).toUpperCase() +\n                        d.data.group.slice(1)}`\n                )\n            )\n            .attr(\"stroke-width\", 1.5)\n            .raise();\n        d3.selectAll(d.outgoing.map(([, d]) => d.text)).attr(\n            \"font-weight\",\n            \"bold\"\n        );\n        // d3.selectAll(d.outgoing.map(([, d]) => d.circle)).style(\"fill\", colorout);\n    }\n    //in outed state, made everything reseted\n    function outed(event, d) {\n        link.style(\"mix-blend-mode\", \"darken\");\n        d3.select(this).attr(\"font-weight\", null);\n        d3.selectAll(d.incoming.map(d => d.path))\n            .attr(\"stroke\", null)\n            .attr(\"stroke-width\", 1);\n        d3.selectAll(d.incoming.map(([d]) => d.text))\n            .attr(\"fill\", null)\n            .attr(\"font-weight\", null);\n        // d3.selectAll(d.incoming.map(([d]) => d.circle)).style(\"fill\", null);\n        d3.selectAll(d.outgoing.map(d => d.path))\n            .attr(\"stroke\", null)\n            .attr(\"stroke-width\", 1);\n        d3.selectAll(d.outgoing.map(([, d]) => d.text))\n            .attr(\"fill\", null)\n            .attr(\"font-weight\", null);\n        // d3.selectAll(d.outgoing.map(([, d]) => d.circle)).style(\"fill\", null);\n    }\n\n    return svg.node();\n};\n","/code/src/redux/reducers/helpReducer.js",[],"/code/src/redux/actions/helpActions.js",[],{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"200","replacedBy":"204"},{"ruleId":"202","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":3,"column":8,"nodeType":"208","messageId":"209","endLine":3,"endColumn":16},{"ruleId":"210","severity":1,"message":"211","line":65,"column":8,"nodeType":"212","endLine":65,"endColumn":10,"suggestions":"213"},{"ruleId":"200","replacedBy":"214"},{"ruleId":"202","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":54,"column":21,"nodeType":"218","endLine":54,"endColumn":40},{"ruleId":"206","severity":1,"message":"207","line":3,"column":8,"nodeType":"208","messageId":"209","endLine":3,"endColumn":16},{"ruleId":"210","severity":1,"message":"219","line":101,"column":39,"nodeType":"208","endLine":101,"endColumn":46},{"ruleId":"210","severity":1,"message":"220","line":104,"column":8,"nodeType":"212","endLine":108,"endColumn":6,"suggestions":"221"},{"ruleId":"206","severity":1,"message":"222","line":74,"column":9,"nodeType":"208","messageId":"209","endLine":74,"endColumn":25},{"ruleId":"206","severity":1,"message":"223","line":75,"column":9,"nodeType":"208","messageId":"209","endLine":75,"endColumn":18},{"ruleId":"206","severity":1,"message":"224","line":76,"column":9,"nodeType":"208","messageId":"209","endLine":76,"endColumn":21},{"ruleId":"206","severity":1,"message":"225","line":77,"column":9,"nodeType":"208","messageId":"209","endLine":77,"endColumn":20},{"ruleId":"206","severity":1,"message":"226","line":112,"column":11,"nodeType":"208","messageId":"209","endLine":112,"endColumn":18},{"ruleId":"227","severity":1,"message":"228","line":121,"column":13,"nodeType":"229","messageId":"230","endLine":121,"endColumn":17},{"ruleId":"206","severity":1,"message":"231","line":128,"column":11,"nodeType":"208","messageId":"209","endLine":128,"endColumn":15},{"ruleId":"206","severity":1,"message":"232","line":188,"column":11,"nodeType":"208","messageId":"209","endLine":188,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":205,"column":13,"nodeType":"229","messageId":"230","endLine":205,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":221,"column":17,"nodeType":"229","messageId":"230","endLine":221,"endColumn":21},{"ruleId":"227","severity":1,"message":"228","line":237,"column":17,"nodeType":"229","messageId":"230","endLine":237,"endColumn":21},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],["233"],["234"],"no-unused-vars","'Skeleton' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getApplications', 'getInformationElements', 'getRelationships', 'getStakeholders', and 'setApplication'. Either include them or remove the dependency array. If 'getApplications' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["235"],["233"],["234"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The ref value 'svgRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'svgRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'getVizData'. Either include it or remove the dependency array.",["236"],"'colorStakeholder' is assigned a value but never used.","'colorData' is assigned a value but never used.","'colorProcess' is assigned a value but never used.","'colorPolicy' is assigned a value but never used.","'arcDraw' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'node' is assigned a value but never used.","'circle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},"Update the dependencies array to be: [getApplications, getInformationElements, getRelationships, getStakeholders, setApplication]",{"range":"241","text":"242"},"Update the dependencies array to be: [stakeholder.stakeholders, informationElement.informationElements, relationship.relations, getVizData]",{"range":"243","text":"244"},[1937,1939],"[getApplications, getInformationElements, getRelationships, getStakeholders, setApplication]",[3318,3438],"[stakeholder.stakeholders, informationElement.informationElements, relationship.relations, getVizData]"]