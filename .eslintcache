[{"/code/src/index.js":"1","/code/src/reportWebVitals.js":"2","/code/src/components/App.js":"3","/code/src/redux/store.js":"4","/code/src/redux/reducers/index.js":"5","/code/src/components/pages/Splash/index.js":"6","/code/src/components/pages/Splash/Splash.jsx":"7","/code/src/components/pages/Home/index.js":"8","/code/src/components/pages/Home/Home.jsx":"9","/code/src/components/pages/index.js":"10","/code/src/components/layouts/Header/index.js":"11","/code/src/components/layouts/Header/Header.jsx":"12","/code/src/components/layouts/index.js":"13","/code/src/components/layouts/Dropdown/index.js":"14","/code/src/components/layouts/Dropdown/Dropdown.jsx":"15","/code/src/components/layouts/Card/index.js":"16","/code/src/components/layouts/Card/Card.jsx":"17","/code/src/components/layouts/Tag/index.js":"18","/code/src/components/layouts/Tag/Tag.jsx":"19","/code/src/components/layouts/Control/index.js":"20","/code/src/components/layouts/Control/Control.jsx":"21","/code/src/components/layouts/Detail/index.js":"22","/code/src/components/layouts/Detail/Detail.jsx":"23","/code/src/components/layouts/Stakeholder/index.js":"24","/code/src/components/layouts/Stakeholder/Stakeholder.jsx":"25","/code/src/components/layouts/InformationElement/index.js":"26","/code/src/components/layouts/InformationElement/InformationElement.jsx":"27","/code/src/redux/reducers/informationElementReducer.js":"28","/code/src/redux/reducers/relationshipReducer.js":"29","/code/src/redux/reducers/applicationReducer.js":"30","/code/src/redux/reducers/stakeholderReducer.js":"31","/code/src/redux/actions/stakeholderActions.js":"32","/code/src/redux/types.js":"33","/code/src/utils/environment.js":"34","/code/src/redux/actions/informationElementsActions.js":"35","/code/src/redux/actions/relationsActions.js":"36","/code/src/redux/actions/applicationActions.js":"37","/code/src/utils/colors.js":"38","/code/src/components/layouts/Visualization/Visualization.jsx":"39","/code/src/utils/d3.js":"40","/code/src/redux/reducers/helpReducer.js":"41","/code/src/redux/actions/helpActions.js":"42","/code/src/utils/app.utils.js":"43","/code/src/redux/actions/index.js":"44","/code/src/redux/actions/vizActions.js":"45","/code/src/redux/reducers/vizReducer.js":"46"},{"size":540,"mtime":1616859885444,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1607786260395,"results":"49","hashOfConfig":"48"},{"size":520,"mtime":1620343940500,"results":"50","hashOfConfig":"48"},{"size":391,"mtime":1614975704084,"results":"51","hashOfConfig":"48"},{"size":603,"mtime":1620085019093,"results":"52","hashOfConfig":"48"},{"size":55,"mtime":1615040244811,"results":"53","hashOfConfig":"48"},{"size":2293,"mtime":1620347514348,"results":"54","hashOfConfig":"48"},{"size":49,"mtime":1615043371606,"results":"55","hashOfConfig":"48"},{"size":27461,"mtime":1620214093257,"results":"56","hashOfConfig":"48"},{"size":0,"mtime":1614987955111,"results":"57","hashOfConfig":"48"},{"size":55,"mtime":1615043553473,"results":"58","hashOfConfig":"48"},{"size":724,"mtime":1615063282606,"results":"59","hashOfConfig":"48"},{"size":0,"mtime":1614975704078,"results":"60","hashOfConfig":"48"},{"size":61,"mtime":1615063152748,"results":"61","hashOfConfig":"48"},{"size":2699,"mtime":1619998211946,"results":"62","hashOfConfig":"48"},{"size":49,"mtime":1615071417859,"results":"63","hashOfConfig":"48"},{"size":1835,"mtime":1617799853284,"results":"64","hashOfConfig":"48"},{"size":46,"mtime":1615078643059,"results":"65","hashOfConfig":"48"},{"size":528,"mtime":1617799853286,"results":"66","hashOfConfig":"48"},{"size":58,"mtime":1615219058338,"results":"67","hashOfConfig":"48"},{"size":11859,"mtime":1620001147521,"results":"68","hashOfConfig":"48"},{"size":55,"mtime":1615225040581,"results":"69","hashOfConfig":"48"},{"size":2025,"mtime":1620000991540,"results":"70","hashOfConfig":"48"},{"size":70,"mtime":1616859885441,"results":"71","hashOfConfig":"48"},{"size":26250,"mtime":1619997298013,"results":"72","hashOfConfig":"48"},{"size":91,"mtime":1616859885439,"results":"73","hashOfConfig":"48"},{"size":25424,"mtime":1619997277960,"results":"74","hashOfConfig":"48"},{"size":2286,"mtime":1620796389435,"results":"75","hashOfConfig":"48"},{"size":792,"mtime":1620796276545,"results":"76","hashOfConfig":"48"},{"size":1889,"mtime":1620796232742,"results":"77","hashOfConfig":"48"},{"size":1405,"mtime":1620796263821,"results":"78","hashOfConfig":"48"},{"size":2528,"mtime":1620789262182,"results":"79","hashOfConfig":"48"},{"size":1551,"mtime":1620794468284,"results":"80","hashOfConfig":"48"},{"size":163,"mtime":1616859894226,"results":"81","hashOfConfig":"48"},{"size":3661,"mtime":1620795737871,"results":"82","hashOfConfig":"48"},{"size":1609,"mtime":1620796199587,"results":"83","hashOfConfig":"48"},{"size":3144,"mtime":1620796115067,"results":"84","hashOfConfig":"48"},{"size":122,"mtime":1617799853291,"results":"85","hashOfConfig":"48"},{"size":4039,"mtime":1620096640555,"results":"86","hashOfConfig":"48"},{"size":16449,"mtime":1620342760609,"results":"87","hashOfConfig":"48"},{"size":326,"mtime":1619997583845,"results":"88","hashOfConfig":"48"},{"size":589,"mtime":1619998207834,"results":"89","hashOfConfig":"48"},{"size":791,"mtime":1620081785033,"results":"90","hashOfConfig":"48"},{"size":0,"mtime":1614975704083,"results":"91","hashOfConfig":"48"},{"size":340,"mtime":1620086045352,"results":"92","hashOfConfig":"48"},{"size":438,"mtime":1620084656954,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"a83vg7",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"96"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"96"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"/code/src/index.js",[],["195","196"],"/code/src/reportWebVitals.js",[],"/code/src/components/App.js",["197"],"import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\n// pages\nimport Splash from \"./pages/Splash\";\nimport Home from \"./pages/Home\";\n\n// Redux store\nimport store from \"../redux/store\";\n\nfunction App() {\n    return (\n        <Router>\n            <Provider store={store}>\n                <Splash />\n                {/* <Home /> */}\n                <div className=\"app\"></div>\n            </Provider>\n        </Router>\n    );\n}\n\nexport default App;\n","/code/src/redux/store.js",[],"/code/src/redux/reducers/index.js",[],"/code/src/components/pages/Splash/index.js",[],"/code/src/components/pages/Splash/Splash.jsx",[],"/code/src/components/pages/Home/index.js",[],"/code/src/components/pages/Home/Home.jsx",["198","199","200","201","202"],"import { React, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Skeleton from \"react-loading-skeleton\";\n\n// Actions\nimport { getStakeholders } from \"../../../redux/actions/stakeholderActions\";\nimport { getInformationElements } from \"../../../redux/actions/informationElementsActions\";\nimport { getRelationships } from \"../../../redux/actions/relationsActions\";\nimport { toggleHelp } from \"../../../redux/actions/helpActions\";\nimport {\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused\n} from \"../../../redux/actions/applicationActions\";\n\nimport Header from \"../../layouts/Header\";\nimport Card from \"../../layouts/Card\";\nimport Tag from \"../../layouts/Tag\";\nimport Control from \"../../layouts/Control\";\nimport Detail from \"../../layouts/Detail\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faExpand,\n    // faSearchPlus,\n    // faSearchMinus ,\n    faCompress\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./_home.scss\";\nimport { colors } from \"../../../utils/colors\";\nimport Visualization from \"../../layouts/Visualization/Visualization\";\nimport {\n    overed,\n    outed,\n    clicked,\n    setPrimaryAnimation,\n    unsetPrimaryAnimation\n} from \"../../../utils/d3\";\n\nconst Home = ({\n    application,\n    stakeholder,\n    informationElement,\n    relationship,\n    help,\n    viz,\n\n    getStakeholders,\n    getInformationElements,\n    getRelationships,\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused,\n    toggleHelp\n}) => {\n    const [expanded, setExpanded] = useState(true);\n    const [endingHelp, setEndingHelp] = useState(false);\n    const handleToggleViz = () => {\n        setExpanded(!expanded);\n    };\n\n    useEffect(() => {\n        const selectedApp = 1;\n        getApplications().then(() => {\n            setApplication(selectedApp);\n        });\n        getStakeholders({ application: selectedApp });\n        getInformationElements({ application: selectedApp });\n        getRelationships({ stakeholder__application: selectedApp });\n    }, []);\n\n    const handleCardClick = (event, element) => {\n        event.preventDefault();\n        if (!application.focused) {\n            setPrimaryAnimation(\n                event,\n                viz.root\n                    .leaves()\n                    .find(node => node.data.label === element.label)\n            );\n            setFocused(element);\n        } else {\n            if (application.focused === element) {\n                unsetPrimaryAnimation(\n                    event,\n                    viz.root\n                        .leaves()\n                        .find(node => node.data.label === element.label)\n                );\n                removeFocused(element);\n            } else {\n                unsetPrimaryAnimation(\n                    event,\n                    viz.root\n                        .leaves()\n                        .find(\n                            node =>\n                                node.data.label === application.focused.label\n                        )\n                );\n                setTimeout(() => {\n                    setPrimaryAnimation(\n                        event,\n                        viz.root\n                            .leaves()\n                            .find(node => node.data.label === element.label)\n                    );\n                }, 400);\n                setFocused(element);\n            }\n        }\n    };\n\n    const endHelp = () => {\n        setEndingHelp(true);\n        setTimeout(() => {\n            toggleHelp();\n            setEndingHelp(false);\n        }, 500);\n    };\n\n    return (\n        <>\n            <div className=\"home\">\n                {(help || endingHelp) && (\n                    <>\n                        <div\n                            className={\n                                \"home__help fromTop \" +\n                                (endingHelp ? \"fromBottom\" : \"\")\n                            }\n                            onClick={() => {\n                                endHelp();\n                            }}\n                        >\n                            <span>Exit help mode</span>\n                        </div>\n                    </>\n                )}\n\n                <Header />\n\n                <div className=\"home__content\">\n                    <div className=\"home__top\">\n                        <Control />\n                    </div>\n                    <div className=\"home__bottom\">\n                        <div\n                            className={\n                                \"home__grid\" + (expanded ? \"\" : \"-expanded\")\n                            }\n                        >\n                            <div className=\"home__left\">\n                                <div className=\"home__navigation\">\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#4A6FA5\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Stakeholders\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>Stakeholders</b> are\n                                                        the people that use the\n                                                        service or the software,\n                                                        departements,\n                                                        organisations, etc.,\n                                                        which are involved in\n                                                        the information exchange\n                                                        process, providing,\n                                                        receiving, or requesting\n                                                        transparency. We can\n                                                        group stakeholders by\n                                                        one entity, for example\n                                                        User or IT Department.\n                                                        However, the exchanged\n                                                        information within an\n                                                        information exchange\n                                                        system may concern all\n                                                        stakeholders within that\n                                                        system, or it may\n                                                        concern the public\n                                                        audience.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#FB5012\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Policy\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>\n                                                            Policy transparency\n                                                        </b>{\" \"}\n                                                        every question whose\n                                                        answer provides goals,\n                                                        intentions, policies and\n                                                        decision making is a\n                                                        policy transparency\n                                                        question. “Why?” is the\n                                                        main question here,\n                                                        i.e., why certain action\n                                                        is performed or for what\n                                                        reason this action is\n                                                        performed in the context\n                                                        of transparency. For\n                                                        example, in a hosting\n                                                        service platform, policy\n                                                        transparency reveals why\n                                                        encryption is needed in\n                                                        servers, or why I have a\n                                                        limited storage\n                                                        capacity.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#61C9A8\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Process\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>\n                                                            Process transparency\n                                                        </b>{\" \"}\n                                                        every question whose\n                                                        answer provides\n                                                        procedures, processes,\n                                                        behaviours and\n                                                        interactions is a\n                                                        process transparency\n                                                        question. “How?” is the\n                                                        main question here,\n                                                        i.e., how something is\n                                                        performed or done in the\n                                                        context of transparency.\n                                                        For example in a hosting\n                                                        service platform,\n                                                        process transparency\n                                                        reveals how data is\n                                                        encrypted in the\n                                                        servers, and how servers\n                                                        are immune from cyber\n                                                        attacks.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                    <div className=\"home__navinfo\">\n                                        <div\n                                            className=\"home__navcolor\"\n                                            style={{ borderColor: \"#FFDA0A\" }}\n                                        ></div>\n                                        <span\n                                            className={help ? \"tip\" : \"\"}\n                                            data-tip=\"1\"\n                                        >\n                                            Data\n                                            {help && (\n                                                <div className=\"tooltip__wrapper\">\n                                                    <span className=\"help__text\">\n                                                        <b>Data transparency</b>{\" \"}\n                                                        every question whose\n                                                        answer provides data,\n                                                        content or information\n                                                        is a data transparency\n                                                        question. “What? When?\n                                                        Where? Who?” These\n                                                        questions primarily\n                                                        answer what information\n                                                        is needed and who are\n                                                        the stakeholders in the\n                                                        context of transparency.\n                                                        For example, in a\n                                                        hosting service\n                                                        platform, data\n                                                        transparency reveals the\n                                                        server's performances to\n                                                        the client for each\n                                                        plan, and the price of\n                                                        each plan.\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </span>\n                                    </div>\n                                </div>\n                                <br />\n                                <div\n                                    className=\"d-flex\"\n                                    style={{ marginBottom: \"20px\" }}\n                                >\n                                    <h3\n                                        style={{\n                                            margin: \"0\",\n                                            marginTop: \"-1px\"\n                                        }}\n                                        className={help ? \"tip\" : \"\"}\n                                        data-tip=\"1\"\n                                    >\n                                        Stakeholders\n                                        {help && (\n                                            <div className=\"tooltip__wrapper\">\n                                                <span className=\"help__text\">\n                                                    <b>Stakeholders</b> are the\n                                                    people that use the service\n                                                    or the software,\n                                                    departements, organisations,\n                                                    etc., which are involved in\n                                                    the information exchange\n                                                    process, providing,\n                                                    receiving, or requesting\n                                                    transparency. We can group\n                                                    stakeholders by one entity,\n                                                    for example User or IT\n                                                    Department. However, the\n                                                    exchanged information within\n                                                    an information exchange\n                                                    system may concern all\n                                                    stakeholders within that\n                                                    system, or it may concern\n                                                    the public audience.\n                                                </span>\n                                            </div>\n                                        )}\n                                    </h3>\n                                    {stakeholder.loading ? (\n                                        <Tag isLoading={true} />\n                                    ) : (\n                                        <Tag\n                                            content={\n                                                stakeholder.stakeholders?.length\n                                            }\n                                            color=\"#3d4659\"\n                                        />\n                                    )}\n                                </div>\n                                {stakeholder.loading ? (\n                                    <>\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                    </>\n                                ) : !stakeholder.stakeholders ||\n                                  !stakeholder.stakeholders.length ? (\n                                    <div>Empty...</div>\n                                ) : (\n                                    <>\n                                        {stakeholder.stakeholders.map(s => (\n                                            <Card\n                                                key={s.id}\n                                                label={s.label}\n                                                name={s.name}\n                                                color=\"#4A6FA5\"\n                                                onClick={e =>\n                                                    handleCardClick(e, s)\n                                                }\n                                            />\n                                        ))}\n                                    </>\n                                )}\n                                <br />\n                                <div\n                                    className=\"d-flex\"\n                                    style={{ marginBottom: \"20px\" }}\n                                >\n                                    <h3\n                                        style={{\n                                            margin: \"0\",\n                                            marginTop: \"-1px\"\n                                        }}\n                                        className={help ? \"tip\" : \"\"}\n                                        data-tip=\"1\"\n                                    >\n                                        Information elements\n                                        {help && (\n                                            <div className=\"tooltip__wrapper\">\n                                                <span className=\"help__text\">\n                                                    <b>Information elements</b>{\" \"}\n                                                    are pieces of information\n                                                    exchanged amongst\n                                                    stakeholders. IPs or\n                                                    information providers are\n                                                    responsible for form and\n                                                    present the information to\n                                                    the IRs or information\n                                                    receivers. The way the{\" \"}\n                                                    <b>information elements</b>{\" \"}\n                                                    are formed and presented to\n                                                    others is affected by\n                                                    stakeholders’ transparency\n                                                    requirements. There are\n                                                    three different types of\n                                                    information elements,\n                                                    related to their\n                                                    transparency meaningfulness.\n                                                    These types are as follows:{\" \"}\n                                                    <b>data</b> type,{\" \"}\n                                                    <b>process</b> type, or{\" \"}\n                                                    <b>policy</b> type.\n                                                </span>\n                                            </div>\n                                        )}\n                                    </h3>\n                                    {informationElement.loading ? (\n                                        <Tag isLoading={true} />\n                                    ) : (\n                                        <Tag\n                                            content={\n                                                informationElement\n                                                    .informationElements?.length\n                                            }\n                                            color=\"#3d4659\"\n                                        />\n                                    )}\n                                </div>\n                                {informationElement.loading ? (\n                                    <>\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                        <Card isLoading={true} />\n                                    </>\n                                ) : !informationElement.informationElements ||\n                                  !informationElement.informationElements\n                                      .length ? (\n                                    <div>Empty...</div>\n                                ) : (\n                                    <>\n                                        {informationElement.informationElements.map(\n                                            ie => (\n                                                <Card\n                                                    key={ie.id}\n                                                    label={ie.label}\n                                                    name={ie.name}\n                                                    color={colors[ie.type]}\n                                                    onClick={e =>\n                                                        handleCardClick(e, ie)\n                                                    }\n                                                />\n                                            )\n                                        )}\n                                    </>\n                                )}\n                            </div>\n                            <div className=\"home__middle\">\n                                <div\n                                    className=\"home__expand\"\n                                    style={{ right: expanded ? \"14px\" : 0 }}\n                                >\n                                    <FontAwesomeIcon\n                                        icon={expanded ? faExpand : faCompress}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                        onClick={handleToggleViz}\n                                    />\n                                    {/* <FontAwesomeIcon\n                                        icon={faSearchPlus}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                    />\n                                    <FontAwesomeIcon\n                                        icon={faSearchMinus}\n                                        size=\"lg\"\n                                        fixedWidth\n                                        className=\"icon\"\n                                    /> */}\n                                </div>\n                                <Visualization />\n                            </div>\n                            <div\n                                className={\n                                    \"home__right\" +\n                                    (expanded ? \"\" : \"-expanded\")\n                                }\n                            >\n                                <Detail />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    relationship: state.relationship,\n    help: state.help.help,\n    viz: state.viz\n});\n\nexport default connect(mapSateToProps, {\n    getStakeholders,\n    getInformationElements,\n    getRelationships,\n    getApplications,\n    setApplication,\n    setFocused,\n    removeFocused,\n    toggleHelp\n})(Home);\n","/code/src/components/pages/index.js",[],["203","204"],"/code/src/components/layouts/Header/index.js",[],"/code/src/components/layouts/Header/Header.jsx",[],"/code/src/components/layouts/index.js",[],"/code/src/components/layouts/Dropdown/index.js",[],"/code/src/components/layouts/Dropdown/Dropdown.jsx",["205"],"import { React, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./_dropdown.scss\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faCaretDown,\n    faInfoCircle,\n    faCog,\n    faSignOutAlt,\n    faLayerGroup\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { toggleHelp } from \"../../../redux/actions/helpActions\";\nimport { handleTipPosition } from \"../../../utils/app.utils\";\n\nconst Dropdown = ({ help, toggleHelp }) => {\n    const refDropdown = useRef(null);\n\n    const toggleDropdown = event => {\n        if (refDropdown.current?.open) {\n            if (event !== undefined) {\n                event.preventDefault();\n            }\n            refDropdown.current.open = false;\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"click\", () => {\n            toggleDropdown();\n        });\n    }, []);\n\n    const startHelp = e => {\n        toggleHelp();\n        document.querySelectorAll(\"[data-tip]\").forEach((element) => {\n            element.removeEventListener(\"mouseenter\", handleTipPosition);\n            element.addEventListener(\"mouseenter\", handleTipPosition);\n        });\n    };\n\n    return (\n        <details className=\"dropdown\" ref={refDropdown}>\n            <summary className=\"dropdown__toggle\" onClick={toggleDropdown}>\n                <FontAwesomeIcon icon={faCog} fixedWidth />\n                <FontAwesomeIcon icon={faCaretDown} fixedWidth size=\"sm\" />\n            </summary>\n            <div className=\"dropdown__menu\">\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faLayerGroup} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Your applications</Link>\n                </div>\n                <div className=\"dropdown__devider\"></div>\n                <div className=\"dropdown__item\" onClick={e => startHelp(e)}>\n                    <FontAwesomeIcon icon={faInfoCircle} fixedWidth size=\"md\" />\n                    <a href=\"#\" to=\"/\">\n                        Help\n                    </a>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faCog} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Settings</Link>\n                </div>\n                <div className=\"dropdown__item\">\n                    <FontAwesomeIcon icon={faSignOutAlt} fixedWidth size=\"md\" />\n                    <Link to=\"/\">Sign out</Link>\n                </div>\n            </div>\n        </details>\n    );\n};\n\nconst mapSateToProps = state => ({\n    help: state.help.help\n});\n\nexport default connect(mapSateToProps, {\n    toggleHelp\n})(Dropdown);\n","/code/src/components/layouts/Card/index.js",[],"/code/src/components/layouts/Card/Card.jsx",[],"/code/src/components/layouts/Tag/index.js",[],"/code/src/components/layouts/Tag/Tag.jsx",[],"/code/src/components/layouts/Control/index.js",[],"/code/src/components/layouts/Control/Control.jsx",["206"],"import { React, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Skeleton from \"react-loading-skeleton\";\n\nimport \"./_control.scss\";\n\nimport Tag from \"../Tag\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faChevronDown,\n    faChevronUp,\n    faSpinner\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Control = ({ application, stakeholder, informationElement, help }) => {\n    let [isOpen, setIsOpen] = useState(false);\n\n    const handleToggle = () => {\n        setIsOpen(!isOpen);\n    };\n\n    if (application.loading) {\n        return (\n            <div className=\"control control-collapsed\">\n                <FontAwesomeIcon\n                    className=\"spinner\"\n                    icon={faSpinner}\n                    size=\"lg\"\n                />\n            </div>\n        );\n    }\n\n    return (\n        <>\n            <div className={\"control \" + (isOpen ? \"\" : \"control-collapsed\")}>\n                <div className=\"control__header\">\n                    <div className=\"control__left\">\n                        {application.loading ? (\n                            <h2>{application.application?.name}</h2>\n                        ) : (\n                            <h2>{application.application?.name}</h2>\n                        )}\n                    </div>\n                    <div className=\"control__right\">\n                        {/* <FontAwesomeIcon\n                            icon={faInfo}\n                            fixedWidth\n                            size=\"sm\"\n                        />\n                        <a href=\"\">read transparency note</a> */}\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Stakeholders\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Stakeholders</b> are the people\n                                            that use the service or the\n                                            software, departements,\n                                            organisations, etc., which are\n                                            involved in the information exchange\n                                            process, providing, receiving, or\n                                            requesting transparency. We can\n                                            group stakeholders by one entity,\n                                            for example User or IT Department.\n                                            However, the exchanged information\n                                            within an information exchange\n                                            system may concern all stakeholders\n                                            within that system, or it may\n                                            concern the public audience.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    stakeholder.stakeholders &&\n                                    stakeholder.stakeholders.length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Policy\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Policy transparency</b> every\n                                            question whose answer provides\n                                            goals, intentions, policies and\n                                            decision making is a policy\n                                            transparency question. “Why?” is the\n                                            main question here, i.e., why\n                                            certain action is performed or for\n                                            what reason this action is performed\n                                            in the context of transparency. For\n                                            example, in a hosting service\n                                            platform, policy transparency\n                                            reveals why encryption is needed in\n                                            servers, or why I have a limited\n                                            storage capacity.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"policy\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Process\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Process transparency</b> every\n                                            question whose answer provides\n                                            procedures, processes, behaviours\n                                            and interactions is a process\n                                            transparency question. “How?” is the\n                                            main question here, i.e., how\n                                            something is performed or done in\n                                            the context of transparency. For\n                                            example in a hosting service\n                                            platform, process transparency\n                                            reveals how data is encrypted in the\n                                            servers, and how servers are immune\n                                            from cyber attacks.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"process\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                        <div className=\"control__info\">\n                            <p\n                                style={{\n                                    margin: \"0\",\n                                    marginTop: \"-1px\"\n                                }}\n                                className={help ? \"tip\" : \"\"}\n                                data-tip=\"0\"\n                            >\n                                Data\n                                {help && (\n                                    <div className=\"tooltip__wrapper\">\n                                        <span className=\"help__text\">\n                                            <b>Data transparency</b> every\n                                            question whose answer provides data,\n                                            content or information is a data\n                                            transparency question. “What? When?\n                                            Where? Who?” These questions\n                                            primarily answer what information is\n                                            needed and who are the stakeholders\n                                            in the context of transparency. For\n                                            example, in a hosting service\n                                            platform, data transparency reveals\n                                            the server's performances to the\n                                            client for each plan, and the price\n                                            of each plan.\n                                        </span>\n                                    </div>\n                                )}\n                            </p>\n                            <Tag\n                                content={\n                                    informationElement.informationElements?.filter(\n                                        i => {\n                                            return i.type === \"data\";\n                                        }\n                                    ).length\n                                }\n                                color=\"#3d4659\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"control__bottom\">\n                    <div\n                        className={\n                            \"control__pannel\" +\n                            (isOpen ? \"\" : \" control__pannel-callapsed\")\n                        }\n                    >\n                        <p>✏️ Control here ...</p>\n                    </div>\n\n                    <div\n                        className=\"control__toggle\"\n                        onClick={handleToggle}\n                        title=\"Toggle menu\"\n                    >\n                        <FontAwesomeIcon icon={faChevronUp} size=\"sm\" />\n                        <FontAwesomeIcon icon={faChevronDown} size=\"sm\" />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    help: state.help.help\n});\n\nexport default connect(mapSateToProps)(Control);\n","/code/src/components/layouts/Detail/index.js",[],"/code/src/components/layouts/Detail/Detail.jsx",[],"/code/src/components/layouts/Stakeholder/index.js",[],"/code/src/components/layouts/Stakeholder/Stakeholder.jsx",[],"/code/src/components/layouts/InformationElement/index.js",[],"/code/src/components/layouts/InformationElement/InformationElement.jsx",[],"/code/src/redux/reducers/informationElementReducer.js",[],"/code/src/redux/reducers/relationshipReducer.js",[],"/code/src/redux/reducers/applicationReducer.js",[],"/code/src/redux/reducers/stakeholderReducer.js",[],"/code/src/redux/actions/stakeholderActions.js",[],"/code/src/redux/types.js",[],"/code/src/utils/environment.js",[],"/code/src/redux/actions/informationElementsActions.js",[],"/code/src/redux/actions/relationsActions.js",[],"/code/src/redux/actions/applicationActions.js",[],"/code/src/utils/colors.js",[],"/code/src/components/layouts/Visualization/Visualization.jsx",["207","208"],"import React, { useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./_visualization.scss\";\nimport { chart } from \"../../../utils/d3\";\nimport { setJsonData } from \"../../../redux/actions/vizActions\";\n\nimport { select } from \"d3\";\nexport const d3 = require(\"d3\");\n\nconst Visualization = ({\n    application,\n    stakeholder,\n    informationElement,\n    relationship,\n    jsonData,\n    setJsonData\n}) => {\n    const svgRef = useRef(null);\n\n    const drawViz = ({ nodes, links }) => {\n        const svg = select(svgRef.current);\n\n        chart(svg, { nodes, links });\n    };\n\n    const getVizData = () => {\n        let data = {};\n        data.nodes = [];\n        data.links = [];\n        stakeholder.stakeholders.forEach(stakeholder => {\n            data.nodes.push({\n                id: stakeholder.id,\n                label: stakeholder.label,\n                name: stakeholder.name,\n                group: \"stakeholder\",\n                weight: stakeholder.weight\n            });\n        });\n        informationElement.informationElements.forEach(ie => {\n            data.nodes.push({\n                id: ie.id,\n                label: ie.label,\n                name: ie.name,\n                group: ie.type,\n                weight: ie.weight\n            });\n        });\n        relationship.relations\n            .map(relation => {\n                return {\n                    id: relation.id,\n                    type: relation.type,\n                    stakeholder: stakeholder.stakeholders.find(s => {\n                        return s.id === relation.stakeholder;\n                    }),\n                    information_element: informationElement.informationElements.find(\n                        ie_ => {\n                            return ie_.id === relation.information_element;\n                        }\n                    )\n                };\n            })\n            .forEach(relation => {\n                data.links.push({\n                    source: [\"production\"].includes(relation.type)\n                        ? relation.stakeholder.label\n                        : relation.information_element.label,\n                    target: [\"production\"].includes(relation.type)\n                        ? relation.information_element.label\n                        : relation.stakeholder.label,\n                    type: relation.type\n                });\n            });\n        informationElement.informationElements.forEach(ie => {\n            if (ie.information_elements.length !== 0) {\n                ie.information_elements.forEach(ie_ => {\n                    data.links.push({\n                        source: informationElement.informationElements.find(\n                            ie__ => {\n                                return ie__.id === ie_;\n                            }\n                        ).label,\n                        target: ie.label,\n                        type: \"uses\"\n                    });\n                });\n            }\n        });\n        setJsonData(data);\n        return data;\n    };\n\n    useEffect(() => {\n        if (\n            stakeholder.stakeholders &&\n            informationElement.informationElements &&\n            relationship.relations\n        ) {\n            const data = getVizData();\n            drawViz(data);\n        }\n\n        return () => {\n            const svg = select(svgRef.current);\n            svg.selectAll(\"*\").remove();\n        };\n    }, [\n        stakeholder.stakeholders,\n        informationElement.informationElements,\n        relationship.relations\n    ]);\n\n    // return <div>Hello 👋, I am a Visualization component.</div>;\n    return <svg style={{ marginTop: \"-40px\" }} ref={svgRef}></svg>;\n};\n\nconst mapSateToProps = state => ({\n    application: state.application,\n    stakeholder: state.stakeholder,\n    informationElement: state.informationElement,\n    relationship: state.relationship,\n    jsonData: state.viz.jsonData,\n    root: state.viz.root\n});\n\nexport default connect(mapSateToProps, { setJsonData })(Visualization);\n","/code/src/utils/d3.js",["209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227"],"import store from \"../redux/store\";\nimport { setRoot } from \"../redux/actions/vizActions\";\nimport { setFocused, removeFocused } from \"../redux/actions/applicationActions\";\nimport { SET_FOCUSED, REMOVE_FOCUSED } from \"../redux/types\";\n\nexport const d3 = require(\"d3\");\n\nconst radius = 250;\nconst tree = d3.cluster().size([2 * Math.PI, radius]);\n\nconst line = d3\n    .lineRadial()\n    .curve(d3.curveBundle.beta(0.85))\n    .radius(d => d.y)\n    .angle(d => d.x);\n\nconst width = 1100;\nconst colornone = \"#ccc\";\n\nvar colorStakeholder = \"#4A6FA5\";\nvar colorData = \"#FFDA0A\";\nvar colorProcess = \"#61C9A8\";\nvar colorPolicy = \"#FB5012\";\n\nfunction bilink(root) {\n    const map = new Map(root.leaves().map(d => [d.data.label, d]));\n\n    for (const d of root.leaves()) {\n        d.incoming = [];\n        d.outgoing = d.data.targets.map(i => [d, map.get(i)]);\n    }\n    for (const d of root.leaves()) {\n        for (const o of d.outgoing) {\n            o[1].incoming.push(o);\n        }\n    }\n    return root;\n}\n\nconst data_ = ({ nodes, links }) => {\n    const groupById = new Map();\n    const nodeById = new Map(nodes.map(node => [node.label, node]));\n\n    for (const node of nodes) {\n        let group = groupById.get(node.group);\n        if (!group) {\n            groupById.set(\n                node.group,\n                (group = { label: node.group, children: [] })\n            );\n        }\n        group.children.push(node);\n        node.targets = [];\n    }\n\n    for (const { source: sourceId, target: targetId } of links) {\n        nodeById.get(sourceId).targets.push(targetId);\n    }\n\n    return { children: [...groupById.values()] };\n};\n\nconst findStartAngle = children => {\n    var min = children[0].x;\n    children.forEach(function(d) {\n        if (d.x < min) min = d.x;\n    });\n    return min - 0.3;\n};\n\nconst findEndAngle = children => {\n    var max = children[0].x;\n    children.forEach(function(d) {\n        if (d.x > max) max = d.x;\n    });\n    return max + 0.3;\n};\n\nexport function setPrimaryAnimation(event, d) {\n    const text = d3.select(d.text);\n    text.attr(\"font-weight\", \"bold\");\n    text.transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", 16.5);\n    text.style(\n        \"fill\",\n        eval(\n            `color${d.data.group.charAt(0).toUpperCase() +\n                d.data.group.slice(1)}`\n        )\n    );\n    d3.selectAll(d.incoming.map(d => d.path))\n        .data(d.incoming.map(d => d[0]))\n        .attr(\"stroke\", t =>\n            eval(\n                `color${t.data.group.charAt(0).toUpperCase() +\n                    t.data.group.slice(1)}`\n            )\n        )\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-dasharray\", 1500 + \" \" + 1500)\n        .attr(\"stroke-dashoffset\", 1500)\n        .transition()\n        .duration(1500)\n        .ease(d3.easeLinear)\n        .attr(\"stroke-dashoffset\", 0);\n    d3.selectAll(d.outgoing.map(d => d.path))\n        .attr(\n            \"stroke\",\n            eval(\n                `color${d.data.group.charAt(0).toUpperCase() +\n                    d.data.group.slice(1)}`\n            )\n        )\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-dasharray\", 1500 + \" \" + 1500)\n        .attr(\"stroke-dashoffset\", 1500)\n        .transition()\n        .duration(1500)\n        .ease(d3.easeLinear)\n        .attr(\"stroke-dashoffset\", 0);\n    const textsOutgoing = d3.selectAll(d.outgoing.map(([, d]) => d.text));\n    textsOutgoing.attr(\"font-weight\", \"bold\");\n    textsOutgoing\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", 16.5);\n    const textsIncoming = d3.selectAll(d.incoming.map(d => d[0].text));\n    textsIncoming.attr(\"font-weight\", \"bold\");\n    textsIncoming\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", 16.5);\n\n    const root = store.getState().viz.root;\n    d3.selectAll(\n        root\n            .leaves()\n            .filter(node => node.data.label !== d.data.label)\n            .filter(node => !d.outgoing.map(d => d[1]).includes(node))\n            .filter(node => !d.incoming.map(d => d[0]).includes(node))\n            .map(node => node.text)\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \".3\");\n    d3.selectAll(\n        root\n            .leaves()\n            .map(node =>\n                node.incoming\n                    .map(n => n.path)\n                    .concat(node.incoming.map(n => n.path))\n            )\n            .flat()\n            .filter(\n                path =>\n                    !d.incoming.map(d => d.path).includes(path) &&\n                    !d.outgoing.map(d => d.path).includes(path)\n            )\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \".3\");\n\n    d3.selectAll(\n        root\n            .leaves()\n            .filter(node => node.data.label !== d.data.label)\n            .filter(node => !d.outgoing.map(d => d[1]).includes(node))\n            .filter(node => !d.incoming.map(d => d[0]).includes(node))\n            .map(node => node.circle)\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \".5\")\n        .attr(\"r\", 6); // set the radius\n\n    d3.select(d.circle)\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 10); // set the radius\n    d3.selectAll(d.outgoing.map(d => d[1].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 10); // set the radius\n    d3.selectAll(d.incoming.map(d => d[0].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 10); // set the radius\n}\n\nexport function unsetPrimaryAnimation(event, d) {\n    d3.select(d.text).attr(\"font-weight\", \"normal\");\n    d3.select(d.text).style(\"fill\", \"#3D4758\");\n\n    d3.selectAll(d.incoming.map(d => d.path))\n        .attr(\"stroke\", null)\n        .attr(\"stroke-width\", 1);\n\n    d3.selectAll(d.incoming.map(([d]) => d.text))\n        .attr(\"fill\", null)\n        .attr(\"font-weight\", null);\n    d3.selectAll(d.outgoing.map(d => d.path))\n        .attr(\"stroke\", null)\n        .attr(\"stroke-width\", 1);\n\n    d3.selectAll(d.outgoing.map(([, d]) => d.text))\n        .attr(\"fill\", null)\n        .attr(\"font-weight\", null);\n    d3.selectAll(d.incoming.map(d => d[0].text)).attr(\"font-weight\", \"normal\");\n\n    const root = store.getState().viz.root;\n    const texts = d3.selectAll(root.leaves().map(node => node.text));\n    texts\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"font-size\", 16);\n    texts\n        .transition()\n        .delay(200)\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", 1);\n\n    d3.selectAll(\n        root\n            .leaves()\n            .map(node => node.incoming.map(n => n.path))\n            .flat()\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \"1\");\n    d3.selectAll(\n        root\n            .leaves()\n            .map(node => node.outgoing.map(n => n.path))\n            .flat()\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \"1\");\n\n    d3.selectAll(\n        root\n            .leaves()\n            .filter(node => node.data.label !== d.data.label)\n            .filter(node => !d.outgoing.map(d => d[1]).includes(node))\n            .filter(node => !d.incoming.map(d => d[0]).includes(node))\n            .map(node => node.circle)\n    )\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .style(\"opacity\", \"1\")\n        .attr(\"r\", 8); // set the radius\n\n    d3.select(d.circle)\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 8); // set the radius\n    d3.selectAll(d.outgoing.map(d => d[1].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 8); // set the radius\n    d3.selectAll(d.incoming.map(d => d[0].circle))\n        .transition()\n        .duration(200)\n        .ease(d3.easeLinear)\n        .attr(\"r\", 8); // set the radius\n}\n\n// Primary animation (onClick)\nexport function clicked(event, d) {\n    let element = {};\n    if (d.data.group === \"stakeholder\") {\n        element = store\n            .getState()\n            .stakeholder.stakeholders.find(\n                element => element.label === d.data.label\n            );\n    } else {\n        element = store\n            .getState()\n            .informationElement.informationElements.find(\n                element => element.label === d.data.label\n            );\n    }\n    if (!store.getState().application.focused) {\n        setPrimaryAnimation(event, d);\n        store.dispatch({\n            type: SET_FOCUSED,\n            payload: element\n        });\n    } else {\n        if (store.getState().application.focused === element) {\n            unsetPrimaryAnimation(event, d);\n            store.dispatch({\n                type: REMOVE_FOCUSED\n            });\n        } else {\n            unsetPrimaryAnimation(\n                event,\n                store\n                    .getState()\n                    .viz.root.leaves()\n                    .find(\n                        node =>\n                            node.data.label ===\n                            store.getState().application.focused.label\n                    )\n            );\n            setTimeout(() => {\n                setPrimaryAnimation(event, d);\n            }, 400);\n            store.dispatch({\n                type: SET_FOCUSED,\n                payload: element\n            });\n        }\n    }\n}\n\n//change link style based on the event(mouseover) Secondary animation\nexport function overed(event, d) {\n    return null;\n    // link.style(\"mix-blend-mode\", null);\n    d3.select(d.text).attr(\"font-weight\", \"bold\");\n    d3.selectAll(d.incoming.map(d => d.path))\n        .data(d.incoming.map(d => d[0]))\n        .attr(\"stroke\", t =>\n            eval(\n                `color${t.data.group.charAt(0).toUpperCase() +\n                    t.data.group.slice(1)}`\n            )\n        )\n        .attr(\"stroke-width\", 1.5)\n        .raise();\n    // d3.selectAll(d.incoming.map(([d]) => d.text)).attr(\"fill\", colorin).attr(\"font-weight\", \"bold\");\n\n    // d3.selectAll(d.incoming.map(([d]) => d.text)).data(d.incoming).attr(\"fill\", eval(`color${d.data.group.charAt(0).toUpperCase() + d.data.group.slice(1)}`)).attr(\"font-weight\", \"bold\");\n\n    // d3.selectAll(d.incoming.map(([d]) => d.circle)).style(\"fill\", colorin);\n    // d.incoming.filter(d => d.path === path)[0]\n    d3.selectAll(d.outgoing.map(d => d.path))\n        .attr(\n            \"stroke\",\n            eval(\n                `color${d.data.group.charAt(0).toUpperCase() +\n                    d.data.group.slice(1)}`\n            )\n        )\n        .attr(\"stroke-width\", 1.5)\n        .raise();\n    d3.selectAll(d.outgoing.map(([, d]) => d.text)).attr(\"font-weight\", \"bold\");\n    d3.selectAll(d.incoming.map(d => d[0].text)).attr(\"font-weight\", \"bold\");\n    // d3.selectAll(d.outgoing.map(([, d]) => d.circle)).style(\"fill\", colorout);\n}\n\n//in outed state, made everything reseted\nexport function outed(event, d) {\n    return null;\n    // link.style(\"mix-blend-mode\", \"darken\");\n    d3.select(d.text).attr(\"font-weight\", \"normal\");\n    d3.selectAll(d.incoming.map(d => d.path))\n        .attr(\"stroke\", null)\n        .attr(\"stroke-width\", 1);\n    d3.selectAll(d.incoming.map(([d]) => d.text))\n        .attr(\"fill\", null)\n        .attr(\"font-weight\", null);\n    // d3.selectAll(d.incoming.map(([d]) => d.circle)).style(\"fill\", null);\n    d3.selectAll(d.outgoing.map(d => d.path))\n        .attr(\"stroke\", null)\n        .attr(\"stroke-width\", 1);\n    d3.selectAll(d.outgoing.map(([, d]) => d.text))\n        .attr(\"fill\", null)\n        .attr(\"font-weight\", null);\n    d3.selectAll(d.incoming.map(d => d[0].text)).attr(\"font-weight\", null);\n    // d3.selectAll(d.outgoing.map(([, d]) => d.circle)).style(\"fill\", null);\n}\n\nconst handleRotateText = d => {\n    if (d.x >= Math.PI) {\n        if (d.x > Math.PI && d.x < (3 * Math.PI) / 2 - 0.5) {\n            return \"rotate(-180)\";\n        } else {\n            return \"rotate(-180)\";\n        }\n    } else {\n        if (d.x > Math.PI / 2 + 0.5 && d.x < (3 * Math.PI) / 2) {\n            return null;\n        } else {\n            return null;\n        }\n    }\n};\n\nexport const chart = (svg, { nodes, links }) => {\n    const data = data_({ nodes, links });\n\n    const nodeById = new Map(nodes.map(node => [node.label, node]));\n\n    const root = tree(\n        bilink(\n            d3\n                .hierarchy(data)\n                .sort(\n                    (a, b) =>\n                        d3.ascending(a.height, b.height) ||\n                        d3.ascending(a.data.label, b.data.label)\n                )\n        )\n    );\n    setRoot(root, store.dispatch);\n    svg.attr(\"viewBox\", [-width / 2 + 30, -width / 2, width, width]);\n\n    // 🏛\n    const arcWidth = 10;\n    const arc = d3\n        .arc()\n        .innerRadius(radius + 6 - arcWidth)\n        .outerRadius(radius + 6 + arcWidth)\n        .startAngle(d => findStartAngle(d.children))\n        .endAngle(d => findEndAngle(d.children))\n        .cornerRadius(5);\n\n    //arc drawing\n    const arcDraw = svg\n        .append(\"g\")\n        .selectAll(\"g\")\n        .data(root.descendants().filter(d => d.height === 1))\n        .join(\"g\")\n        .append(\"path\")\n        .attr(\"d\", d => arc(d))\n        // .attr(\"transform\", d => (d.endAngle <= Math.PI ? (\"rotate(-2)\") : \"rotate(4)\"))\n        .attr(\"fill\", d =>\n            eval(\n                `color${d.data.label.charAt(0).toUpperCase() +\n                    d.data.label.slice(1)}`\n            )\n        )\n        .style(\"opacity\", \".2\");\n\n    const node = svg\n        .append(\"g\")\n        .attr(\"fill\", \"#3D4758\")\n        .selectAll(\"g\")\n        .data(root.leaves())\n        .join(\"g\")\n        .attr(\n            \"transform\",\n            d => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`\n        )\n        .append(\"text\")\n        .attr(\"font-size\", 16)\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"dx\", d => (d.x >= Math.PI ? \"-1em\" : \"1em\"))\n        .attr(\"x\", d => (d.x < Math.PI ? 15 : -15))\n        .attr(\"text-anchor\", d => (d.x < Math.PI ? \"start\" : \"end\"))\n        .attr(\"transform\", d => handleRotateText(d))\n        // .attr(\"fill\", d =>\n        //     eval(\n        //         `color${d.data.group.charAt(0).toUpperCase() +\n        //             d.data.group.slice(1)}`\n        //     )\n        // )\n        // .attr(\"fill\", colornone\n        // )\n        .style(\"cursor\", \"pointer\")\n        .style(\"user-select\", \"none\")\n        .text(d => nodeById.get(d.data.label).name)\n        //for eadh node,\n        .each(function(d) {\n            d.text = this;\n        })\n        //overed is the behaviour when we have a mouseover on one of the elements(nodes)\n        .on(\"mouseover\", overed)\n        .on(\"mouseout\", outed)\n        .on(\"click\", clicked)\n        .call(text =>\n            text.append(\"title\").text(d => `${nodeById.get(d.data.label).name}`)\n        );\n\n    //link drawing\n    const link = svg\n        .append(\"g\")\n        .attr(\"stroke\", colornone)\n        .attr(\"fill\", \"none\")\n        .selectAll(\"path\")\n        .data(root.leaves().flatMap(leaf => leaf.outgoing))\n        .join(\"path\")\n        .style(\"mix-blend-mode\", \"darken\")\n        .attr(\"d\", ([i, o]) => line(i.path(o)))\n        .each(function(d) {\n            d.path = this;\n        });\n\n    const circle = svg\n        .append(\"g\")\n        .selectAll(\"g\")\n        .data(root.leaves())\n        .join(\"g\")\n        .attr(\n            \"transform\",\n            d => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`\n        )\n\n        .append(\"circle\") // attach a circle\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"cx\", d => (d.x < Math.PI ? 6 : -6))\n        .attr(\"transform\", d => (d.x >= Math.PI ? \"rotate(180)\" : null))\n\n        .attr(\"r\", d => 8) // set the radius\n        .style(\"fill\", d =>\n            eval(\n                `color${d.data.group.charAt(0).toUpperCase() +\n                    d.data.group.slice(1)}`\n            )\n        )\n        .each(function(d) {\n            d.circle = this;\n        })\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", clicked);\n    return svg.node();\n};\n","/code/src/redux/reducers/helpReducer.js",[],"/code/src/redux/actions/helpActions.js",[],"/code/src/utils/app.utils.js",["228"],"export const handleTipPosition = event => {\n    const elementRect = event.target.getBoundingClientRect();\n    const tipWrapper = event.target.getElementsByClassName(\n        \"tooltip__wrapper\"\n    )[0];\n\n    if (tipWrapper) {\n        tipWrapper.style.top = `${elementRect.y + 2}    px`;\n        tipWrapper.style.left = 0;\n        tipWrapper.style.right = \"auto\";\n        tipWrapper.style.transform = `translate(${elementRect.x}px, 0)`;\n\n        if (event.target.getAttribute(\"data-tip\") == \"0\") {\n            tipWrapper.style.top = `${30}px`;\n        }\n\n        if (elementRect.x + 20 + 250 > window.outerWidth) {\n            tipWrapper.style.transform = `translate(${elementRect.x -\n                (elementRect.x + 250 - window.outerWidth) -\n                20}px, 0)`;\n        }\n    }\n};\n","/code/src/redux/actions/index.js",[],"/code/src/redux/actions/vizActions.js",[],"/code/src/redux/reducers/vizReducer.js",[],{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":7,"column":8,"nodeType":"235","messageId":"236","endLine":7,"endColumn":12},{"ruleId":"233","severity":1,"message":"237","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":16},{"ruleId":"233","severity":1,"message":"238","line":35,"column":5,"nodeType":"235","messageId":"236","endLine":35,"endColumn":11},{"ruleId":"233","severity":1,"message":"239","line":36,"column":5,"nodeType":"235","messageId":"236","endLine":36,"endColumn":10},{"ruleId":"233","severity":1,"message":"240","line":37,"column":5,"nodeType":"235","messageId":"236","endLine":37,"endColumn":12},{"ruleId":"241","severity":1,"message":"242","line":73,"column":8,"nodeType":"243","endLine":73,"endColumn":10,"suggestions":"244"},{"ruleId":"229","replacedBy":"245"},{"ruleId":"231","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":59,"column":21,"nodeType":"249","endLine":59,"endColumn":40},{"ruleId":"233","severity":1,"message":"237","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":16},{"ruleId":"241","severity":1,"message":"250","line":105,"column":39,"nodeType":"235","endLine":105,"endColumn":46},{"ruleId":"241","severity":1,"message":"251","line":108,"column":8,"nodeType":"243","endLine":112,"endColumn":6,"suggestions":"252"},{"ruleId":"233","severity":1,"message":"253","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":20},{"ruleId":"233","severity":1,"message":"254","line":3,"column":22,"nodeType":"235","messageId":"236","endLine":3,"endColumn":35},{"ruleId":"233","severity":1,"message":"255","line":20,"column":5,"nodeType":"235","messageId":"236","endLine":20,"endColumn":21},{"ruleId":"233","severity":1,"message":"256","line":21,"column":5,"nodeType":"235","messageId":"236","endLine":21,"endColumn":14},{"ruleId":"233","severity":1,"message":"257","line":22,"column":5,"nodeType":"235","messageId":"236","endLine":22,"endColumn":17},{"ruleId":"233","severity":1,"message":"258","line":23,"column":5,"nodeType":"235","messageId":"236","endLine":23,"endColumn":16},{"ruleId":"259","severity":1,"message":"260","line":88,"column":9,"nodeType":"261","messageId":"262","endLine":88,"endColumn":13},{"ruleId":"259","severity":1,"message":"260","line":96,"column":13,"nodeType":"261","messageId":"262","endLine":96,"endColumn":17},{"ruleId":"259","severity":1,"message":"260","line":111,"column":13,"nodeType":"261","messageId":"262","endLine":111,"endColumn":17},{"ruleId":"263","severity":1,"message":"264","line":344,"column":5,"nodeType":"265","messageId":"266","endLine":372,"endColumn":78},{"ruleId":"259","severity":1,"message":"260","line":348,"column":13,"nodeType":"261","messageId":"262","endLine":348,"endColumn":17},{"ruleId":"259","severity":1,"message":"260","line":364,"column":13,"nodeType":"261","messageId":"262","endLine":364,"endColumn":17},{"ruleId":"263","severity":1,"message":"264","line":380,"column":5,"nodeType":"265","messageId":"266","endLine":394,"endColumn":76},{"ruleId":"233","severity":1,"message":"267","line":444,"column":11,"nodeType":"235","messageId":"236","endLine":444,"endColumn":18},{"ruleId":"259","severity":1,"message":"260","line":453,"column":13,"nodeType":"261","messageId":"262","endLine":453,"endColumn":17},{"ruleId":"233","severity":1,"message":"268","line":460,"column":11,"nodeType":"235","messageId":"236","endLine":460,"endColumn":15},{"ruleId":"233","severity":1,"message":"269","line":501,"column":11,"nodeType":"235","messageId":"236","endLine":501,"endColumn":15},{"ruleId":"233","severity":1,"message":"270","line":514,"column":11,"nodeType":"235","messageId":"236","endLine":514,"endColumn":17},{"ruleId":"259","severity":1,"message":"260","line":531,"column":13,"nodeType":"261","messageId":"262","endLine":531,"endColumn":17},{"ruleId":"271","severity":1,"message":"272","line":13,"column":51,"nodeType":"273","messageId":"262","endLine":13,"endColumn":53},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'Skeleton' is defined but never used.","'overed' is defined but never used.","'outed' is defined but never used.","'clicked' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getApplications', 'getInformationElements', 'getRelationships', 'getStakeholders', and 'setApplication'. Either include them or remove the dependency array. If 'getApplications' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["276"],["274"],["275"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The ref value 'svgRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'svgRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'getVizData'. Either include it or remove the dependency array.",["277"],"'setFocused' is defined but never used.","'removeFocused' is defined but never used.","'colorStakeholder' is assigned a value but never used.","'colorData' is assigned a value but never used.","'colorProcess' is assigned a value but never used.","'colorPolicy' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'arcDraw' is assigned a value but never used.","'node' is assigned a value but never used.","'link' is assigned a value but never used.","'circle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-global-assign","no-unsafe-negation",{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},"Update the dependencies array to be: [getApplications, getInformationElements, getRelationships, getStakeholders, setApplication]",{"range":"282","text":"283"},"Update the dependencies array to be: [stakeholder.stakeholders, informationElement.informationElements, relationship.relations, getVizData]",{"range":"284","text":"285"},[2070,2072],"[getApplications, getInformationElements, getRelationships, getStakeholders, setApplication]",[3442,3562],"[stakeholder.stakeholders, informationElement.informationElements, relationship.relations, getVizData]"]